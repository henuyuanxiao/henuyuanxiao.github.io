<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue面试题总结</title>
      <link href="/2022/12/19/vue%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2022/12/19/vue%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><strong>1、虚拟DOM中key的作用：</strong></p><p>​        key是<a href="https://so.csdn.net/so/search?q=%E8%99%9A%E6%8B%9FDOM&amp;spm=1001.2101.3001.7020">虚拟DOM</a>对象的标识，当状态中的数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】的差异比较，比较规则如下：</p><p><strong>2、key的对比规则：</strong></p><p>​        1、旧虚拟DOM中找到了与新虚拟DOM相同的key：</p><ul><li>若虚拟DOM中内容没变，直接使用之前的真实DOM</li><li>若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li></ul><p>​        2、旧虚拟DOM中未找到与新虚拟DOM相同的key</p><ul><li>创建新的真实DOM，随后渲染到页面</li></ul><p><strong>3、用index作为key可能会引发的问题：</strong></p><p>​        1、若对数据进行：逆序添加、逆序删除等破坏顺序操作：会产生没有必要的真实DOM更新 ===&gt; 界面效果没问底，但效率低</p><p>​        2、如果结构中还包含输入类的DOM：会产生错误DOM更新 ===&gt; 界面有问题</p><p><strong>4、开发中如何选择key？</strong></p><p>​        1、最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值</p><p>​        2、如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的</p><p><strong>5、Vue 组件中 data 为什么必须是函数？</strong></p><p>​        保证组件的独立性和可复用性，data是一个函数，组件实例化的时候将会调用这个函数，返回一个对象，计算机会给这个对象分配一个内存地址，你实例化几次，就分配几个内存地址，他们的地址都不一样，所以每个组件中的数据不会相互干扰，改变其中一个组件的状态，其它组件不变。</p><p><strong>6、vuex的State特性是？</strong></p><p>​        state属性是Vuex中用于存放组件之间共享的数据；也就是说，我们把一些组件之间共享的状态主要存放在state属性中；它采用的是单一状态树——用一个对象就包含了全部的应用层级状态。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p><p><strong>7、Vue声明组件的state是⽤data⽅法，那为什么data是通过⼀个function来返回⼀个对象，⽽不是直接写⼀个对象呢？</strong><br>​        从语法上说，如果不⽤function返回就会出现语法错误导致编译不通过。从原理上的话，⼤概就是组件可以被多次创建，如果不使⽤function就会使所有调⽤该组件的页⾯公⽤同⼀个数据域，这样就失去了组件的概念了</p><p><strong>8、介绍一下Vue的响应式系统</strong></p><p>​        1、任何一个 Vue Component 都有一个与之对应的 Watcher 实例</p><p>​        2、Vue 的 data 上的属性会被添加 getter 和 setter 属性</p><p>​        3、当 Vue Component render 函数被执行的时候, data 上会被 触碰(touch), 即被读, getter 方法会被调用, 此时 Vue 会去记录此 Vue component 所依赖的所有 data。(这一过程被称为依赖收集)</p><p>​        4、data 被改动时（主要是用户操作）, 即被写, setter 方法会被调用, 此时 Vue 会去通知所有依赖于此 data 的组件去调用他们的 render 函数进行更新</p><p><strong>9、computed与watch的区别</strong></p><ul><li>1、computed擅长处理的场景：一个数据受多个数据影响；watch擅长处理的场景：一个数据影响多个数据。 </li><li>2、功能上：computed是计算属性，watch是监听一个值的变化，然后执行对应的回调。</li><li>3、是否调用缓存：computed支持缓存，只有依赖数据发生改变,才会重新进行计算;而watch不支持缓存，数据变,直接会触发相应的操作。</li><li>4、是否调用return：computed中的函数必须要用return返回，watch中的函数不是必须要用return。</li><li>5、computed不支持异步 ，当computed内有异步操作时无效，无法监听数据的变化;而watch支持异步。</li><li>6、computed默认第一次加载的时候就开始监听；watch默认第一次加载不做监听，如果需要第一次加载做监听，添加immediate属性，设置为true（immediate:true）</li></ul><p><strong>10、介绍一下Vue的生命周期</strong></p><p>​        每一个vue实例从创建到销毁的过程，就是这个vue实例的<a href="https://so.csdn.net/so/search?q=%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&amp;spm=1001.2101.3001.7020">生命周期</a>。在这个过程中，他经历了从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载等一系列过程。</p><ul><li>将要创建 ===&gt;调用beforeCreate函数</li><li>创建完毕 ===&gt;调用created函数</li><li>将要挂载 ===&gt;调用beforeMount函数</li><li>挂载完毕 ===&gt;调用mounted函数</li><li>将要更新 ===&gt;调用beforeUpdate函数</li><li>更新完毕 ===&gt;调用updated函数</li><li>将要销毁 ===&gt;调用beforeDestory函数</li><li>销毁完毕 ===&gt;调用destroyed函数</li></ul><p><strong>11、vue生命周期的作用是什么?</strong><br>Vue生命周期中有多个事件钩子，让我们在控制整个Vue实例过程时更容易形成好的逻辑。</p><p><strong>12、第一次页面加载会触发哪几个钩子?</strong><br>第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子<br><strong>13、DOM 渲染在 哪个周期中就已经完成?</strong><br>DOM 渲染在 mounted 中就已经完成了。</p><p><strong>14、简单描述每个周期具体适合哪些场景</strong></p><ul><li>beforeCreate : 可以在这加个loading事件，在加载实例时触发</li><li>created : 初始化完成时的事件写在这⾥，如在这结束loading事件，异步请求也适宜在这⾥调⽤</li><li>mounted : 挂载元素，获取到DOM节点</li><li>updated : 如果对数据统⼀处理，在这⾥写上相应函数</li><li>beforeDestroy : 可以做⼀个确认停⽌事件的确认框</li><li>nextTick : 更新数据后⽴即操作dom</li></ul><p><strong>15、组件之间是怎么通信的</strong></p><p>组件之间通信主要分为三种：父子传参，子父传参，兄弟传参。</p><ol><li>父子传参：父组件通过自定义属性的方式传参，通过props属性给子组件传参，子组件通过props属性去接收参数。</li><li>子父传参：子组件通过自定义事件的方式传参，通过$emit去进行传参。</li></ol><p><strong>16、Vue.cli中怎样使用自定义的组件？</strong></p><ol><li>在 components 目录新建组件文件</li><li>在需要用到的页面import中导入</li><li>使用component注册</li><li>在 template 视图中使用组件标签</li></ol><p><strong>17、Vue如何实现按需加载配合webpack设置</strong></p><ul><li>webpack中提供了require.ensure( )来实现按需加载。以前引入路由是通过import这样的方式引入，改为const定义方式进行引入。</li><li>不进行页面按需加载引入方式 import home from ../../common/home.vue</li><li>进行页面按需加载的引入方式：const home = r =&gt;require.ensure([],() =&gt;require(‘../../common/home.vue)))</li></ul><p><strong>18、scss是什么？在Vue.cli中的安装使用步骤是？有哪几大特性？</strong></p><p><code>css</code>的预编译语言。</p><p>使用步骤：</p><ul><li>第一步：先装<code>css-loader</code>、<code>node-loader</code>、<code>sass-loader</code>等加载器模块；</li><li>第二步：在<code>build</code>目录找到<code>webpack.base.config.js</code>，在<code>extends</code>属性中加一个拓展<code>.scss</code>；</li><li>第三步：在同一个文件，配置一个<code>module</code>属性；</li><li>第四步：然后在组件的<code>style</code>标签加上<code>lang</code>属性 ，例如：<code>lang=”scss”</code>；</li></ul><p>特性:</p><ul><li>可以用变量，例如（<code>$变量名称=值</code>）；</li><li>可以用混合器；</li><li>可以嵌套；</li></ul><p><strong>19、如何让 CSS 只在当前组件中起作用？</strong></p><p>将当前组件的<code>&lt;style&gt;</code>修改为<code>&lt;style scoped&gt;</code>。</p><p><strong>20、聊聊你对Vue.js的template编译的理解？</strong></p><p>​        简⽽⾔之，就是先转化成AST树，再得到的render函数返回VNode（Vue的虚拟DOM节点）<br>详情步骤：<br>​        ⾸先，通过compile编译器把template编译成AST语法树（abstract syntax tree 即 源代码的抽象语法结构的树状表现形式），compile是createCompiler的返回值，createCompiler是⽤以创建编译器的。另外compile还负责合并option。<br>​        然后，AST会经过generate（将AST语法树转化成render funtion字符串的过程）得到render函数，render的返回值是VNode，VNode是Vue的虚拟DOM节点，⾥⾯有（标签名、⼦节点、⽂本等等） </p><p><strong>21、Vue 路由跳转的几种方式</strong></p><ul><li>第一种方式：router-link （声明式路由）</li><li>第二种方式：router.push(编程式路由)</li><li>第三种方式：this.$router.push() (函数里面调用)</li><li>第四种方式：this.$router.replace() (用法同上,push)</li><li>第五种方式：this.$router.go(n)</li></ul><p><strong>22、Vue的路由实现：hash模式和history模式</strong></p><p>hash 模式 (默认)</p><ul><li>工作原理: 监听网页的hash值变化 —&gt; onhashchange事件, 获取location.hash</li><li>使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</li><li>会给用户好像跳转了网页一样的感觉, 但是实际上没有跳转</li><li>主要用在<strong>单</strong>页面应用(SPA)</li></ul><p>history 模式</p><ul><li>工作原理: 主要利用 history.pushState() API 来改变URL, 而不刷新页面.</li><li>其实一共有五种模式可以实现改变URL, 而不刷新页面.</li><li>需要后台配置支持, 如果输入一个并不存在的url, 需要后端配置做 “兜底配置”, 不是粗暴的返回404, 而是返回首页</li></ul><p><strong>23、Vue与Angular以及React的区别？</strong></p><p>基本概念</p><ul><li>Angular 是一个应用设计框架与开发平台，用于创建高效、复杂、精致的单页面应用。</li><li>React 是一个用于构建用户界面的 JavaScript 库</li><li>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</li></ul><p>三者比较<br>​        相同点</p><ul><li>1.都是基于javascript/typescript的前端开发库，为前端开发提供高效、复用性高的开发方式</li><li>2.都有组件和模板的开发思想</li><li>3.各自的组件都有生命周期，不用的组件可以卸载，不占用资源</li><li>4.都支持指令，如样式、事件等的指令</li></ul><p>​        不同点</p><ul><li>1.创始和发行不同：Angular是由googl提供支持的，初始发行于 2016年9月；React由Facebook维护，初始发行于 2013年3月；Vue是由前google人员创建，初始发行于2014年2月</li><li>2.应用类型不同：Angular支持开发native应用程序、SPA单页应用程序、混合应用程序和web应用程序；React支持开发SPA和移动应用程序；Vue支持开发高级SPA，开始支持native应用程序</li><li>3.模型不同：angular基于MVC（模型-视图-控制器）架构；react和vue是基于Virtual DOM（虚拟的文档对象模型）</li><li>4、数据流流向不同：Angular使用的是双向数据绑定，React用的是单数据流的，而Vue则支持两者。</li><li>\5. 对微应用和微服务的支持不同：Angular使用的是TypeScript，因此它更适合于单页Web应用（single page web application，SPA），而非微服务。相反，React和Vue的灵活性更适合微应用和微服务的开发。</li><li>\6. 对原生应用的支持不同： React Native为iOS和Android开发原生应用；Angular的NativeScript已被原生应用所采用，特别是Ionic框架已经被广泛地运用在制作混合应用等方面；Vue的Weex平台正在开发之中，尚无下一步使之成为全面跨平台的计划。</li><li>\7. 框架和库：Angular 是一个框架而不是一个库，因为它提供了关于如何构建应用程序的强有力的约束，并且还提供了更多开箱即用的功能。React 和 Vue 是是一种库，可以和各种包搭配。</li><li>\8. 组件之间传值方式不同：Angular 中直接的父子组件，父组件可以直接访问子组件的 public 属性和方法，也可以借助于@Input 和 @Output 进行通讯。没有直接关系的，借助于 Service 单例进行通讯；React 组件之间通过通过prop或者state来通信，不同组件之间还有Rex状态管理功能；Vue组件之间通信通过props ，以及Vuex状态管理来传值</li></ul><p><strong>24、vue-router中导航守卫有哪些？</strong></p><p>​        全局前置守卫、路由独享守卫、组件内守卫</p><p><strong>25、 为什么使用Vue？</strong></p><ul><li>优点：轻量级的框架、双向数据绑定、组件化开发、单页面路由、学习成本低、虚拟dom、渐进式框架、数据和结构的分离、运行速度快、插件化</li><li>缺点：不支持ie8以下、社区没有angular和react丰富、缺乏高阶教程和文档、单页面应用不利用seo优化、首次加载时耗时多</li></ul><p><strong>26、说出至少 4 种 vue 指令和它的用法？</strong></p><ul><li>v-if：判断是否隐藏；</li><li>v-for：数据循环；</li><li>v-bind:class：绑定一个属性；</li><li>v-model：实现双向绑定；</li></ul><p><strong>27、v-if和v-show的区别</strong></p><ul><li>v-if通过控制dom节点的方式，添加和删除元素，进而实现显示或隐藏元素，v-show通过设置dom元素的display来实现显示或隐藏的操作，并不会删除dom</li><li>v-if隐藏会将组件销毁，显示时会将其内部的监听事件重建，v-show只是设置display，并不会阻止子组件内部的监听事件</li><li>v-if有着更高的切换消耗，v-show有着更高的初始渲染消耗</li></ul><p><strong>28、为什么避免 v-if 和 v-for 一起用？</strong></p><p>​        当 <code>Vue</code> 处理指令时，<code>v-for</code> 比 <code>v-if</code> 具有更高的优先级，通过<code>v-if</code> 移动到容器元素，不会再重复遍历列表中的每个值。取而代之的是，只检查它一次，且不会在 <code>v-if</code> 为否的时候运算 <code>v-for</code>。</p><p><strong>29、什么是 MVVM ？</strong></p><ul><li><code>MVVM</code>是<code>Model-View-ViewModel</code>的缩写。<code>MVVM</code>是一种设计思想。<code>Model</code> 层代表数据模型，也可以在<code>Model</code>中定义数据修改和操作的业务逻辑；<code>View</code> 代表<code>UI 组件</code>，它负责将数据模型转化成<code>UI</code> 展现出来，<code>ViewModel</code> 是一个同步<code>View</code> 和 <code>Model</code>的对象。</li><li>在<code>MVVM</code>架构下，<code>View</code> 和 <code>Model</code> 之间并没有直接的联系，而是通过<code>ViewModel</code>进行交互，<code>Model</code> 和 <code>ViewModel</code> 之间的交互是双向的， 因此<code>View</code> 数据的变化会同步到<code>Model</code>中，而<code>Model</code> 数据的变化也会立即反应到<code>View</code> 上。</li><li><code>ViewModel</code> 通过双向数据绑定把 <code>View</code> 层和 <code>Model</code> 层连接起来，而<code>View</code> 和 <code>Model</code> 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作<code>DOM</code>, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 <code>MVVM</code> 来统一管理。</li></ul><p><strong>30、vuex是什么？怎么使用？哪种功能场景使用它？</strong></p><p><code>vue</code>框架中状态管理。在<code>main.js</code>引入<code>store</code>注入。新建一个目录<code>store</code> 。场景有：单页应用中，组件之间的状态，音乐播放、登录状态、加入购物车等。</p><p><strong>31、vuex有哪几种属性？</strong></p><p>有五种，分别是 <code>State</code>、 <code>Getter</code>、<code>Mutation</code> 、<code>Action</code>、 <code>Module</code>。</p><p><strong>32、vuex的State特性</strong></p><ul><li><code>Vuex</code>就是一个仓库，仓库里面放了很多对象。其中<code>state</code>就是数据源存放地，对应于一般<code>Vue</code>对象里面的<code>data</code>。</li><li><code>state</code>里面存放的数据是<a href="https://so.csdn.net/so/search?q=%E5%93%8D%E5%BA%94%E5%BC%8F&amp;spm=1001.2101.3001.7020">响应式</a>的，<code>Vue</code>组件从<code>store</code>中读取数据，若是<code>store</code>中的数据发生改变，依赖这个数据的组件也会发生更新。</li><li>通过<code>mapState</code>和mapGetters把全局 <code>state</code> 和 <code>getters</code> 映射到当前组件的 <code>computed</code> 计算属性中。</li></ul><p><strong>33、vuex的Getter特性</strong></p><ul><li><code>getters</code> 可以对<code>State</code>进行计算操作，它就是<code>Store</code>的计算属性。</li><li>虽然在组件内也可以做计算属性，但是<code>getters</code> 可以在多组件之间复用。</li><li>如果一个状态只在一个组件内使用，可以不用<code>getters</code>。</li></ul><p><strong>34、vuex的Mutation特性</strong></p><p><code>Action</code> 类似于 <code>mutation</code>，不同在于：<code>Action</code> 提交的是 <code>mutation</code>，而不是直接变更状态；<code>Action</code> 可以包含任意异步操作。</p><p><strong>35、不用Vuex会带来什么问题？</strong></p><ul><li>可维护性会下降，想修改数据要维护三个地方；</li><li>可读性会下降，因为一个组件里的数据，根本就看不出来是从哪来的；</li><li>增加耦合，大量的上传派发，会让耦合性大大增加，<code>Vue</code>用<code>Component</code>本意就是为了减少耦合，现在这么用，和组件化的初衷相背。</li></ul><p><strong>36、keep-alive 的作用是什么?</strong></p><p>包裹动态组件时，会缓存不活动的组件实例，主要用于保留组件状态或避免重新渲染。</p><p><strong>37、vue-loader 是什么？用途有哪些？</strong></p><p>解析<code>.vue</code>文件的一个加载器。</p><p>用途：js 可以写<code>es6</code>、<code>style</code>样式可以<code>scss</code>或<code>less</code>、<code>template</code>可以加<code>jade</code>等。</p><p><strong>38、如何获取dom</strong><br>​        在我们的vue项⽬中，难免会因为引⽤第三⽅库⽽需要操作DOM标签，vue为我们提供了ref属性。 ref 被⽤来给元素或⼦组件注册引⽤信息。引⽤信息将会注册在⽗组件的 $refs 对象上。如果在普通的 DOM 元素上使⽤，引⽤指向的就是 DOM 元素；如果⽤在⼦组件上，引⽤就指向组件实例</p><p><strong>39、iframe的优缺点？</strong></p><p>​        iframe也称作嵌⼊式框架，嵌⼊式框架和框架⽹页类似，它可以把⼀个⽹页的框架和内容嵌⼊在现有的⽹页中。<br>​        优点：</p><ul><li>解决加载缓慢的第三⽅内容如图标和⼴告等的加载问题</li><li>Security sandbox</li><li>并⾏加载脚本</li><li>⽅便制作导航栏</li></ul><p>​        缺点：</p><ul><li>iframe会阻塞主页⾯的Onload事件</li><li>即使内容为空，加载也需要时间</li><li>没有语意</li></ul><p><strong>40、请说出vue.cli项⽬中src⽬录每个⽂件夹和⽂件的⽤法？</strong><br>​        assets⽂件夹是放静态资源；components是放组件；router是定义路由相关的配置;view视图；app.vue是⼀个应⽤主组件；main.js是⼊⼝⽂件<br><strong>41、vue常⽤的修饰符</strong></p><ul><li>.stop:等统⼀JavaScript中的event.stopPropagation(),防⽌事件冒泡</li><li>.prevent:等同于JavaScript中的event。preventDefault(),防⽌执⾏预设的⾏为(如果事件可取消，则取消该事件，⽽不停⽌事件的进⼀步</li><li>传播)；</li><li>.capture:与事件冒泡的⽅向相反，事件捕获由外到内</li><li>.self:只会触发⾃⼰范围内的事件，不包含⼦元素；</li><li>.once:只会触发⼀次。</li></ul><p><strong>42、⾃定义指令（v-check、v-focus）的⽅法有哪些？它有哪些钩⼦函数？还有哪些钩⼦函数参数？</strong></p><ul><li>全局定义指令：在vue对象的directive⽅法⾥⾯有两个参数，⼀个是指令名称，另外⼀个是函数。组件内定义指令：directives</li><li>钩⼦函数：bind（绑定事件触发）、inserted(节点插⼊的时候触发)、update（组件内相关更新）</li><li>钩⼦函数参数：el、binding</li></ul><p><strong>43、vue的两个核⼼点</strong><br>数据驱动，组件系统</p><ul><li>数据驱动：ViewModel，保证数据和视图的⼀致性</li><li>组件系统：应⽤类UI可以看做全部是由组件树构成的</li></ul><p><strong>44、delete和Vue.delete删除数组的区别</strong></p><ul><li>delete只是被删除的元素变成了empty/undefined其他的元素的键值还是不变。</li><li>Vue.delete直接删除了数组 改变了数组的键值</li></ul><p><strong>45、Vue-router跳转和location.href有什么区别</strong><br>​        使⽤location.href=/url 来跳转，简单⽅便，但是刷新了页⾯；使⽤history.pushState(/url),⽆刷新页⾯，静态跳转；引进router，然后使⽤router.push(/url)来跳转，使⽤了diff算法，实现了按需加载，减少了dom的消耗。其实使⽤router跳转和使⽤history.pushState()没什么差别，因为vue-router就是⽤了history.pushState(),尤其是在history模式下。<br><strong>46、RouterLink在IE和Firefox中不起作⽤（路由不跳转）的问题</strong><br>​        ⽅法⼀<br>​        只⽤a标签，不使⽤button标签<br>​        ⽅法⼆<br>​        使⽤button标签和Router.navigate⽅法<br><strong>47、请说下封装 vue 组件的过程？</strong><br>​        ⾸先，组件可以提升整个项⽬的开发效率。能够把页⾯抽象成多个相对独⽴的模块，解决了我们传统项⽬开发：效率低、难维护、复⽤性等问题。<br>​        然后，使⽤Vue.extend⽅法创建⼀个组件，然后使⽤Vue.component⽅法注册组件。⼦组件需要数据，可以在props中接受定义。⽽⼦组件修改好数据后，想把数据传递给⽗组件。可以采⽤emit⽅法。<br><strong>48、params和query的区别</strong><br>​        ⽤法：query要⽤path来引⼊，params要⽤name来引⼊，接收参数都是类似的，分别是this. $router.query.name 和 this.$router.params.name。url地址显⽰：query更加类似于我们ajax中get传参，params则类似于post，说的再简单⼀点，前者在浏览器地址栏中显⽰参数，后者则不显⽰<br>​        注意点：query刷新不会丢失query⾥⾯的数据params刷新会丢失params⾥⾯的数据<br><strong>49、vue mock数据</strong><br>​        在项⽬中尝试了mockjs，mock数据，实现前后端分离开发。<br>​        关于mockjs，官⽹描述的是</p><ul><li>1.前后端分离</li><li>2.不需要修改既有代码，就可以拦截 Ajax 请求，返回模拟的响应数据。</li><li>3.数据类型丰富</li><li>4.通过随机数据，模拟各种场景。</li></ul><p>​        总结：在后端接⼝没有开发完成之前，前端可以⽤已有的接⼝⽂档，在真实的请求上拦截ajax，并根据mockjs的mock数据的规则，模拟真实接⼝返回的数据，并将随机的模拟数据返回参与相应的数据交互处理，这样真正实现了前后台的分离开发。<br>​        与以往的⾃⼰模拟的假数据不同，mockjs可以带给我们的是：在后台接⼝未开发完成之前模拟数据，并返回，完成前台的交互；在后台数据完成之后，你所做的只是去掉mockjs：停⽌拦截真实的ajax，仅此⽽已。<br><strong>50、vue初始化页⾯闪动问题</strong><br>​        使⽤vue开发时，在vue初始化之前，由于div是不会vue管的，所以我们写的代码在还没有解析的情况下会容易出现花屏现象，看到类似于的字样，虽然⼀般情况下这个时间很短暂，但是我们还是有必要解决这个问题的。<br>​        ⾸先：在css⾥加上[v-cloak]{display:none;}，如果没有彻底解决问题，则在根元素加上style=“display:none;” :style=”{display:block}”<br><strong>51、vue更新数组时触发视图更新的⽅法</strong><br>push();pop();shift();unshift();splice();sort();reverse()<br><strong>52、vue常⽤的UI组件库</strong><br>Mint UI，element，VUX<br><strong>53、mint-ui是什么？怎么使⽤？说出⾄少三个组件使⽤⽅法？</strong><br>​        基于vue的前端组件库。<br>​        npm安装，然后import样式和js，vue.use（mintUi）全局引⼊。在单个组件局部引⼊：import {Toast} from ‘mint-ui’。</p><ul><li>组件⼀：Toast(‘登录成功’)；</li><li>组件⼆：mint-header；</li><li>组件三：mint-swiper</li></ul><p><strong>54、Vue⾥⾯router-link在电脑上有⽤，在安卓上没反应怎么解决？</strong><br>​        Vue路由在Android机上有问题，babel问题，安装babel polypill插件解决<br><strong>55、Vue2中注册在router-link上事件⽆效解决⽅法</strong><br>​        使⽤@click.native。原因：router-link会阻⽌click事件，.native指直接监听⼀个原⽣事件。</p><p><strong>56、Vue-router 导航守卫有哪些</strong></p><ul><li>全局前置/钩子：beforeEach、beforeResolve、afterEach</li><li>路由独享的守卫：beforeEnter</li><li>组件内的守卫：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave</li></ul><p>引自：<a href="https://blog.csdn.net/m0_53206841/article/details/125065551">2022Vue经典面试题及答案汇总(持续更新）</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在图片中隐藏信息——基于Java的LSP算法</title>
      <link href="/2022/12/19/%E5%9C%A8%E5%9B%BE%E7%89%87%E4%B8%AD%E9%9A%90%E8%97%8F%E4%BF%A1%E6%81%AF%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EJava%E7%9A%84LSP%E7%AE%97%E6%B3%95%20-%20%E5%89%AF%E6%9C%AC/"/>
      <url>/2022/12/19/%E5%9C%A8%E5%9B%BE%E7%89%87%E4%B8%AD%E9%9A%90%E8%97%8F%E4%BF%A1%E6%81%AF%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EJava%E7%9A%84LSP%E7%AE%97%E6%B3%95%20-%20%E5%89%AF%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>​    趁放假把下学期的创新项目实践预判完成一点，下学期多腾出时间备考。</p><h1 id="LSB算法"><a href="#LSB算法" class="headerlink" title="LSB算法"></a>LSB算法</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    LSB算法：全称Least Significant Bit（最低有效位），指将秘密信息嵌入到载体图像像素值的<a href="https://baike.baidu.com/item/%E6%9C%80%E4%BD%8E%E6%9C%89%E6%95%88%E4%BD%8D/4487937">最低有效位</a>，也称最不显著位，改变这一位置对载体图像的品质影响最小。</p><p>​    LSB属于空域算法中的一种，是将信息嵌入到图像点中像素位的最低位，以保证嵌入的信息是不可见的，但是由于使用了图像不重要的像素位，算法的鲁棒性差，水印信息很容易为滤波、图像量化、几何变形的操作破坏。</p><p>​    本篇主要讲简单实现在图片中注入隐含信息。</p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>​    以.png图片为例，每一个像素点显示的颜色由r、g、b三个元素分量的数值决定（取值范围为0~255），将其化为二进制的形式，如Color(255,102,102),不足8位的首部补0，可得到如下排列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1111111 1</span><br><span class="line">1110011 0</span><br><span class="line">1110011 0</span><br></pre></td></tr></table></figure><p>​    末尾排列为100，将其置0，我们可以将二进制编码写在其中，对应需要隐藏的信息。由于最低有效位的原理，在复杂的图片中人眼基本感受不到颜色的变化，这样就实现了加密；解密只需将其取出组合，并翻译成对应的文本即可。</p><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>1 将原始载体图像的空域像素值由十进制转换成二进制；</p><p>2 用二进制秘密信息中的每一比特信息替换与之相对应的载体数据的<a href="https://baike.baidu.com/item/%E6%9C%80%E4%BD%8E%E6%9C%89%E6%95%88%E4%BD%8D/4487937">最低有效位</a>；</p><p>3 将得到的含秘密信息的二进制数据转换为十进制像素值，从而获得含秘密信息的图像。</p><h2 id="简单的java代码实现"><a href="#简单的java代码实现" class="headerlink" title="简单的java代码实现"></a>简单的java代码实现</h2><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">encryption</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title function_">encryptionLSB</span><span class="params">(BufferedImage secretImg, String data)</span>&#123;</span><br><span class="line">        List&lt;StringBuffer&gt; rgbList= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;StringBuffer&gt;();</span><br><span class="line">        StringToBin stringToBin=<span class="keyword">new</span> <span class="title class_">StringToBin</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//密文内容转二进制，并分割0和1元素</span></span><br><span class="line">        String dataBin= stringToBin.StrToBinstr(data);</span><br><span class="line">        <span class="type">char</span>[] databinArray=dataBin.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> secretImg.getWidth(), height = secretImg.getHeight();</span><br><span class="line"></span><br><span class="line">        String r8bit=<span class="literal">null</span>;</span><br><span class="line">        String g8bit=<span class="literal">null</span>;</span><br><span class="line">        String b8bit=<span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> a,r = <span class="number">0</span>,g=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> <span class="number">0</span>; w &lt; width; w++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>; h &lt; height; h++) &#123;</span><br><span class="line">                <span class="type">int</span> val=secretImg.getRGB(w,h);</span><br><span class="line">                a = (<span class="number">0xff000000</span> &amp; val) &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line">                r = (<span class="number">0x00ff0000</span> &amp; val) &gt;&gt; <span class="number">16</span>;</span><br><span class="line">                g = (<span class="number">0x0000ff00</span> &amp; val) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">                b = (<span class="number">0x000000ff</span> &amp; val);</span><br><span class="line">                <span class="type">double</span> <span class="variable">power</span> <span class="operator">=</span> Math.pow(<span class="number">2.0</span>, <span class="number">4.0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//转换为二进制</span></span><br><span class="line">                r8bit = Integer.toBinaryString((<span class="type">int</span>)(r));</span><br><span class="line">                g8bit = Integer.toBinaryString((<span class="type">int</span>)(g));</span><br><span class="line">                b8bit = Integer.toBinaryString((<span class="type">int</span>)(b));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//不足8位的在首部补齐0</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">rDifference</span> <span class="operator">=</span> <span class="number">8</span> - r8bit.length();</span><br><span class="line">                <span class="type">int</span> <span class="variable">gDifference</span> <span class="operator">=</span> <span class="number">8</span> - g8bit.length();</span><br><span class="line">                <span class="type">int</span> <span class="variable">bDifference</span> <span class="operator">=</span> <span class="number">8</span> - b8bit.length();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> rDifference; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">                    r8bit=<span class="string">&quot;0&quot;</span>+r8bit;&#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gDifference; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">                    g8bit = <span class="string">&quot;0&quot;</span>+g8bit;&#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bDifference; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">                    b8bit = <span class="string">&quot;0&quot;</span>+b8bit;&#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将末尾置0,便于进行编码隐藏</span></span><br><span class="line">                <span class="comment">//StringBuffer便于修改字符串内容</span></span><br><span class="line">                StringBuffer rbuff=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(r8bit);</span><br><span class="line">                StringBuffer gbuff=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(g8bit);</span><br><span class="line">                StringBuffer bbuff=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(b8bit);</span><br><span class="line">                rbuff.setCharAt(<span class="number">7</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                gbuff.setCharAt(<span class="number">7</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                bbuff.setCharAt(<span class="number">7</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">                rgbList.add(rbuff);</span><br><span class="line">                rgbList.add(gbuff);</span><br><span class="line">                rgbList.add(bbuff);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//生成加密后的rgb数组，并将其元素从二进制转换为十进制</span></span><br><span class="line">        <span class="type">int</span>[] rgbArray=<span class="keyword">new</span> <span class="title class_">int</span>[rgbList.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;rgbList.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;databinArray.length-<span class="number">1</span>) &#123;</span><br><span class="line">                rgbList.get(i).setCharAt(<span class="number">7</span>, databinArray[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rgbArray[i] = Integer.parseInt(rgbList.get(i).toString(), <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成加密图片</span></span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> <span class="number">0</span>; w &lt; width; w++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>; h &lt; height; h++) &#123;</span><br><span class="line">                secretImg.setRGB(w, h,<span class="keyword">new</span> <span class="title class_">Color</span>(rgbArray[i],rgbArray[i+<span class="number">1</span>],rgbArray[i+<span class="number">2</span>]).getRGB());</span><br><span class="line">                i=i+<span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> secretImg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//设置原始图片路径</span></span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">secretImg</span> <span class="operator">=</span> ImageIO.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/img/kitokawa.png&quot;</span>));</span><br><span class="line">        <span class="comment">//设置密文内容</span></span><br><span class="line">        String data=<span class="string">&quot;这是一道密文！&quot;</span>;</span><br><span class="line">        secretImg=encryptionLSB(secretImg,data);</span><br><span class="line">        ImageIO.write(secretImg, <span class="string">&quot;png&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;secret.png&quot;</span>));<span class="comment">//在项目路径输出得到的图片</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">decrypt</span> &#123;<span class="comment">//解密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decryptLSB</span><span class="params">(BufferedImage secretImg,<span class="type">int</span> limit)</span> &#123;<span class="comment">//防止图片尺寸过大，循环过长时间，添加限制次数默认为10000，可适度增大</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> secretImg.getWidth(), height = secretImg.getHeight();</span><br><span class="line">        <span class="type">String</span> <span class="variable">dataBin</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">r8bit</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">g8bit</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b8bit</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> a,x=<span class="number">0</span>, r = <span class="number">0</span>, g = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> <span class="number">0</span>; w &lt; width; w++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>; h &lt; height; h++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> secretImg.getRGB(w, h);</span><br><span class="line">                a = (<span class="number">0xff000000</span> &amp; val) &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line">                r = (<span class="number">0x00ff0000</span> &amp; val) &gt;&gt; <span class="number">16</span>;</span><br><span class="line">                g = (<span class="number">0x0000ff00</span> &amp; val) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">                b = (<span class="number">0x000000ff</span> &amp; val);</span><br><span class="line">                <span class="type">double</span> <span class="variable">power</span> <span class="operator">=</span> Math.pow(<span class="number">2.0</span>, <span class="number">4.0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//转换二进制</span></span><br><span class="line">                r8bit = Integer.toBinaryString((<span class="type">int</span>) (r));</span><br><span class="line">                g8bit = Integer.toBinaryString((<span class="type">int</span>) (g));</span><br><span class="line">                b8bit = Integer.toBinaryString((<span class="type">int</span>) (b));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//不足8位的在首部补齐0</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">rDifference</span> <span class="operator">=</span> <span class="number">8</span> - r8bit.length();</span><br><span class="line">                <span class="type">int</span> <span class="variable">gDifference</span> <span class="operator">=</span> <span class="number">8</span> - g8bit.length();</span><br><span class="line">                <span class="type">int</span> <span class="variable">bDifference</span> <span class="operator">=</span> <span class="number">8</span> - b8bit.length();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> rDifference; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    r8bit = <span class="string">&quot;0&quot;</span> + r8bit;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gDifference; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    g8bit = <span class="string">&quot;0&quot;</span> + g8bit;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bDifference; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    b8bit = <span class="string">&quot;0&quot;</span> + b8bit;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将末尾置0,便于进行编码隐藏</span></span><br><span class="line">                <span class="type">StringBuffer</span> <span class="variable">rbuff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(r8bit);</span><br><span class="line">                <span class="type">StringBuffer</span> <span class="variable">gbuff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(g8bit);</span><br><span class="line">                <span class="type">StringBuffer</span> <span class="variable">bbuff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(b8bit);</span><br><span class="line">                dataBin+=rbuff.charAt(<span class="number">7</span>);</span><br><span class="line">                dataBin+=gbuff.charAt(<span class="number">7</span>);</span><br><span class="line">                dataBin+=bbuff.charAt(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(x&gt;limit)<span class="keyword">break</span>;</span><br><span class="line">                x++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;limit)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//每个字母、汉字、符号的分隔符为&#x27;%#&#x27;</span></span><br><span class="line">        String X=Integer.toBinaryString(<span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">        String Y=Integer.toBinaryString(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">        String[] datas=dataBin.split(X+Y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;datas.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            data+= BinToString.toString(datas[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> limit=<span class="number">10000</span>;</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">secretImg</span> <span class="operator">=</span> ImageIO.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;secret.png&quot;</span>));</span><br><span class="line">        System.out.println(decryptLSB(secretImg,limit));</span><br><span class="line">        File f=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);<span class="comment">//解密内容输出txt</span></span><br><span class="line">        FileOutputStream fos1=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f);</span><br><span class="line">        OutputStreamWriter dos1=<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos1);</span><br><span class="line">        dos1.write(decryptLSB(secretImg,limit));</span><br><span class="line">        dos1.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用到的其他方法类"><a href="#使用到的其他方法类" class="headerlink" title="使用到的其他方法类"></a>使用到的其他方法类</h3><h4 id="加工整合二进制编码字符串"><a href="#加工整合二进制编码字符串" class="headerlink" title="加工整合二进制编码字符串"></a>加工整合二进制编码字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToBin</span> &#123;</span><br><span class="line">    <span class="comment">//加工整合二进制编码字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">StrToBinstr</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="comment">//分隔符为&#x27;%#&#x27;</span></span><br><span class="line">        String x=Integer.toBinaryString(<span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">        String y=Integer.toBinaryString(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">        <span class="type">char</span>[] strChar = str.toCharArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strChar.length; i++) &#123;</span><br><span class="line">            result += Integer.toBinaryString(strChar[i]) + x+y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二进制编码翻译成String"><a href="#二进制编码翻译成String" class="headerlink" title="二进制编码翻译成String"></a>二进制编码翻译成String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinToString</span> &#123;<span class="comment">//加密</span></span><br><span class="line">    <span class="comment">//将二进制翻译成String文本</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(String binary)</span> &#123;</span><br><span class="line">        <span class="comment">//分隔符为&#x27;%#&#x27;</span></span><br><span class="line">        String x=Integer.toBinaryString(<span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">        String y=Integer.toBinaryString(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">        String[] tempStr=binary.split(x+y);</span><br><span class="line">        <span class="type">char</span>[] tempChar=<span class="keyword">new</span> <span class="title class_">char</span>[tempStr.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tempStr.length;i++) &#123;</span><br><span class="line">            tempChar[i]=BinstrToChar(tempStr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(tempChar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将二进制字符串转换成int数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] BinstrToIntArray(String binStr) &#123;</span><br><span class="line">        <span class="type">char</span>[] temp=binStr.toCharArray();</span><br><span class="line">        <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[temp.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;temp.length;i++) &#123;</span><br><span class="line">            result[i]=temp[i]-<span class="number">48</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将二进制转换成字符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">BinstrToChar</span><span class="params">(String binStr)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] temp=BinstrToIntArray(binStr);</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;temp.length;i++)&#123;</span><br><span class="line">            sum +=temp[temp.length-<span class="number">1</span>-i]&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">char</span>)sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>加密生成secret.png：</p><p><img src="https://cdn.jsdelivr.net/gh/henuyuanxiao/cdn/img/LSP/加密生成图片.png" alt="avatar"></p><p>解密生成文本：</p><p><img src="https://cdn.jsdelivr.net/gh/henuyuanxiao/cdn/img/LSP/解密.png" alt="avatar"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>参考链接：</p><p><a href="https://blog.csdn.net/qq_38768365/article/details/102494128">原理详解</a>        <a href="https://baike.baidu.com/item/LSB%E7%AE%97%E6%B3%95/6553811?fr=aladdin">百度百科</a>        <a href="https://zhuanlan.zhihu.com/p/32230487">基于图像的 LSB 隐写术科普</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息加密 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数·矩阵总结</title>
      <link href="/2022/03/14/%E7%9F%A9%E9%98%B5%E6%80%BB%E7%BB%93/"/>
      <url>/2022/03/14/%E7%9F%A9%E9%98%B5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>​    行列式部分知识点总结</p><h1 id="线性代数·矩阵"><a href="#线性代数·矩阵" class="headerlink" title="线性代数·矩阵"></a>线性代数·矩阵</h1><h2 id="常用的特殊矩阵"><a href="#常用的特殊矩阵" class="headerlink" title="常用的特殊矩阵"></a>常用的特殊矩阵</h2><h3 id="三角矩阵"><a href="#三角矩阵" class="headerlink" title="三角矩阵"></a>三角矩阵</h3><p>主对角线以下或以上的元素全为0的方阵</p><h3 id="n阶对角矩阵"><a href="#n阶对角矩阵" class="headerlink" title="n阶对角矩阵"></a>n阶对角矩阵</h3><p>主对角线以外的元素全为0的n阶方阵</p><h4 id="n阶单位矩阵"><a href="#n阶单位矩阵" class="headerlink" title="n阶单位矩阵"></a>n阶单位矩阵</h4><p>主对角线上元素全为1的n阶对角矩阵，用大写字母<strong>E</strong>表示</p><h3 id="零矩阵"><a href="#零矩阵" class="headerlink" title="零矩阵"></a>零矩阵</h3><p>元素全为0的矩阵，用大写字母<strong>O</strong>表示</p><h3 id="行阶梯矩阵"><a href="#行阶梯矩阵" class="headerlink" title="行阶梯矩阵"></a>行阶梯矩阵</h3><p>矩阵的零行都位于非零行的下方，每一个非零行的主元素所在的列以下的元素皆为0，并且每个主元素所在的列位于前一行主元素所在列的右侧。形如：</p><script type="math/tex; mode=display">\begin{pmatrix}1&6&7&9\\0&0&2&6\\0&0&0&0\end{pmatrix} \begin{pmatrix}0&2&3&4\\0&0&5&6\\0&0&0&0\end{pmatrix} \begin{pmatrix}1&2&3&4\\0&0&5&0\\0&0&0&9\end{pmatrix}</script><h4 id="行最简形矩阵"><a href="#行最简形矩阵" class="headerlink" title="行最简形矩阵"></a>行最简形矩阵</h4><p>每个非零行的主元素都是1，并且1所在的列的其余元素均为0，如：</p><script type="math/tex; mode=display">\begin{pmatrix}1&0&0&4\\0&0&1&6\\0&0&0&0\end{pmatrix} \begin{pmatrix}0&1&0&4\\0&0&1&6\\0&0&0&0\end{pmatrix} \begin{pmatrix}1&0&0&4\\0&1&0&6\\0&0&1&2\end{pmatrix}</script><hr><h2 id="矩阵运算法则"><a href="#矩阵运算法则" class="headerlink" title="矩阵运算法则"></a>矩阵运算法则</h2><h3 id="加法和减法"><a href="#加法和减法" class="headerlink" title="加法和减法"></a>加法和减法</h3><p>两个矩阵对应位置上的元素相加减，因此只有同类型的矩阵才能相加减</p><p>具有如下定律：</p><p>（1）<strong>A</strong>+<strong>B</strong>=<strong>B</strong>+<strong>A</strong></p><p>（2）(<strong>A</strong>+<strong>B</strong>)+<strong>C</strong>=<strong>A</strong>+(<strong>B</strong>+<strong>C</strong>)</p><p>（3）<strong>A</strong>+<strong>O</strong>=<strong>A</strong>，其中<strong>O</strong>是m×n阶零矩阵</p><p>（4）<strong>A</strong>+(-<strong>A</strong>)=<strong>O</strong></p><p>因此矩阵减法有：<strong>A</strong>-<strong>B</strong>=<strong>A</strong>+(-<strong>B</strong>)</p><h3 id="数乘"><a href="#数乘" class="headerlink" title="数乘"></a>数乘</h3><p>设$\lambda$、$\mu$为任意实数，有：</p><p>（1）1<strong>A</strong>=<strong>A</strong></p><p>（2）($\lambda$+$\mu$)<strong>A</strong>=$\lambda$<strong>A</strong>+$\mu$<strong>A</strong></p><p>（3）$\lambda$(<strong>A</strong>+<strong>B</strong>)=$\lambda$<strong>A</strong>+$\lambda$<strong>B</strong></p><p>（4）($\lambda\mu$)<strong>A</strong>=$\lambda$($\mu$<strong>A</strong>)=$\mu$($\lambda$<strong>A</strong>)</p><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><p>矩阵<strong>A</strong>与<strong>B</strong>的乘积结果为新的矩阵，其(i,j)元等于<strong>A</strong>的第i行和<strong>B</strong>的第j列的元素对应乘积之和，</p><p>左边矩阵的列数=右边矩阵的行数，结果矩阵拥有左边的行数与右边的列数</p><p>具有以下特点：</p><p>（1）<script type="math/tex">(AB)C=A(BC)</script></p><p>（2）<script type="math/tex">A(B+C)=AB+AC</script>,<script type="math/tex">(B+C)A=BA+CA</script></p><p>（3）<script type="math/tex">\lambda(AB)</script>=$(\lambda A)B$=<script type="math/tex">A(\lambda B)</script></p><p>（4）只有当<script type="math/tex">AB=BA</script>时，<script type="math/tex">(AB)^k=A^kB^k</script></p><h3 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h3><p>将矩阵<script type="math/tex">A</script>的行列互换，记作<script type="math/tex">A^T</script>，具有如下定律：</p><p>（1）(<script type="math/tex">A^T</script>)<script type="math/tex">^T</script>=<script type="math/tex">A</script></p><p>（2）<script type="math/tex">(A+B)^T=A^T+B^T</script></p><p>（3）<script type="math/tex">(\lambda A)^T=\lambda A^T</script></p><p>（4）<script type="math/tex">(AB)^T=B^TA^T</script></p><p>如果<script type="math/tex">A^T</script>=<script type="math/tex">A</script>，则称<script type="math/tex">A</script>为对称矩阵；如果<strong><script type="math/tex">A</script></strong>=<script type="math/tex">-A^T</script>，则称<script type="math/tex">A</script>为反对称矩阵</p><hr><h2 id="可逆矩阵"><a href="#可逆矩阵" class="headerlink" title="可逆矩阵"></a>可逆矩阵</h2><h3 id="伴随矩阵"><a href="#伴随矩阵" class="headerlink" title="伴随矩阵"></a>伴随矩阵</h3><p>设<script type="math/tex">A=(a_{ij})</script>是n(n<script type="math/tex">\geq</script>2)阶方阵，<script type="math/tex">A_{ij}</script>为行列式<script type="math/tex">|A|</script>中元素<script type="math/tex">a_{ij}</script>的代数余子式，称n阶矩阵</p><script type="math/tex; mode=display">\begin{pmatrix}A_{11}&{A_{21}}&{\cdots}&{A_{n1}}\\{A_{12}}&{A_{22}}&{\cdots}&{A_{n2}}\\{\vdots}&{\vdots}&{\ddots}&{\vdots}\\{A_{1n}}&{A_{2n}}&{\cdots}&{A_{nn}}\\\end{pmatrix}$$为方阵**A**的伴随矩阵，记为$$A^*$$ 。且有$$AA^*$$=$$A^*A$$ =$$|A|E$$ 。### 可逆矩阵的判定条件$$A^{-1}=\frac{1}{|A|}A^*$$，如果$$|A|\not=0$$，则$$A$$可逆。### 可逆矩阵的性质（1）$$(A^{-1})^{-1}=A</script><p>（2）<script type="math/tex">(A^T)^{-1}=(A^{-1})^T</script></p><p>（3）<script type="math/tex">(\lambda A^{-1})=\frac{1}{\lambda}A^{-1}</script>，其中<script type="math/tex">\lambda \not=0</script></p><p>（4）<script type="math/tex">(AB)^{-1}=B^{-1}A^{-1}</script></p><p>（5）如果<script type="math/tex">A</script>可逆，则<script type="math/tex">|A|\not=0</script>，且<script type="math/tex">|A^{-1}|=|A|^{-1}</script></p><p>（6）如果<script type="math/tex">A</script>可逆，且<script type="math/tex">AB=AC</script>，则<script type="math/tex">B=C</script></p><hr><h2 id="克拉默法则"><a href="#克拉默法则" class="headerlink" title="克拉默法则"></a>克拉默法则</h2><p>对于线性方程组<script type="math/tex">\begin{cases}a_{11}x_1+a_{12}x_2+\cdots+a_{1n}x_n=b1\\a_{21}x_1+a_{22}x_2+\cdots+a_{2n}x_n=b2\\\cdots\cdots\\a_{n1}x_1+a_{n2}x_2+\cdots+a_{nn}x_n=bn\end{cases}</script>而言,若其系数行列式<script type="math/tex">D=\left|\begin{array}{cccc}{a_{11}}&{a_{12}}&{\cdots}&{a_{1n}}\\{a_{21}}&{a_{22}}&{\cdots}&{a_{2n}}\\{\vdots}&{\vdots}&{\ddots}&{\vdots}\\{a_{n1}}&{a_{n2}}&{\cdots}&{a_{nn}}\\\end{array}\right|\not=0</script>,则该方程组有唯一解:<script type="math/tex">x_1=\frac{D_1}{D},x_2=\frac{D_2}{D},\cdots,x_n=\frac{D_n}{D}</script>.</p><p>其中<script type="math/tex">D_i</script>为将D的第i列替换为<script type="math/tex">\begin{pmatrix}b_1\\b_2\\\vdots\\b_n\end{pmatrix}</script>所形成的新行列式.</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p><strong>推论1:</strong> 若齐次方程组<script type="math/tex">\begin{cases}a_{11}x_1+a_{12}x_2+\cdots+a_{1n}x_n=0\\a_{21}x_1+a_{22}x_2+\cdots+a_{2n}x_n=0\\\cdots\cdots\\a_{n1}x_1+a_{n2}x_2+\cdots+a_{nn}x_n=0\end{cases}</script>的系数行列式不为0,则方程组有唯一的0解:</p><script type="math/tex; mode=display">x_1=0,x_2=0,\cdots,x_n=0</script><p><strong>推论2:</strong> 若上述其次方程组有非零解,则它的系数行列式一定为0.</p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学一 </tag>
            
            <tag> 线性代数 </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数·行列式总结</title>
      <link href="/2022/03/01/%E8%A1%8C%E5%88%97%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
      <url>/2022/03/01/%E8%A1%8C%E5%88%97%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>​    行列式部分知识点总结</p><h1 id="线性代数·行列式"><a href="#线性代数·行列式" class="headerlink" title="线性代数·行列式"></a>线性代数·行列式</h1><h2 id="行列式的定义"><a href="#行列式的定义" class="headerlink" title="行列式的定义"></a>行列式的定义</h2><h3 id="2阶行列式"><a href="#2阶行列式" class="headerlink" title="2阶行列式"></a>2阶行列式</h3><p>​    对于线性方程组<script type="math/tex">\begin{cases}a_{11}x_1+a_{12}x_2=b1\\a_{21}x_1+a_{22}x_2=b2\end{cases}</script>而言，称<script type="math/tex">a_{11}a_{12}-a_{21}a_{22}</script>为二阶方阵<script type="math/tex">\begin{pmatrix}a_{11}&a_{12}\\a_{21}&a_{22}\end{pmatrix}</script>的<strong>行列式</strong>，记作<script type="math/tex">\left|\begin{array}{cccc}a_{11}&a_{12}\\a_{21}&a_{22}\end{array}\right|=a_{11}a_{12}-a_{21}a_{22}</script> ，即主对角线上的乘积减去右对角线上的乘积，即对角线法则。</p><h3 id="3阶行列式"><a href="#3阶行列式" class="headerlink" title="3阶行列式"></a>3阶行列式</h3><p>​    类似2阶行列式，对于线性方程组<script type="math/tex">\begin{cases}a_{11}x_1+a_{12}x_2+a_{13}x_3=b1\\a_{21}x_1+a_{22}x_2+a_{23}x_3=b2\\a_{31}x_1+a_{32}x_2+a_{33}x_3=b3\end{cases}</script>而言，称<script type="math/tex">a_{11}a_{22}a_{33}+a_{12}a_{23}a_{31}+a_{13}a_{21}a_{32}-a_{13}a_{22}a_{31}-a_{11}a_{23}a_{32}-a_{12}a_{21}a_{33}</script>为3阶方阵<script type="math/tex">\begin{pmatrix}a_{11}&a_{12}&a_{13}\\a_{21}&a_{22}&a_{23}\\a_{31}&a_{32}&a_{33}\end{pmatrix}</script>的行列式，记作<script type="math/tex">\left|\begin{array}{cccc}a_{11}&a_{12}&a_{13}\\a_{21}&a_{22}&a_{23}\\a_{31}&a_{32}&a_{33}\end{array}\right|</script></p><p>​    3阶行列式同样具有对角线法则。</p><h3 id="n阶行列式"><a href="#n阶行列式" class="headerlink" title="n阶行列式"></a>n阶行列式</h3><p>​    形如<script type="math/tex">\left|\begin{array}{cccc}{a_{11}}&{a_{12}}&{\cdots}&{a_{1n}}\\{a_{21}}&{a_{22}}&{\cdots}&{a_{2n}}\\{\vdots}&{\vdots}&{\ddots}&{\vdots}\\{a_{m1}}&{a_{m2}}&{\cdots}&{a_{mn}}\\\end{array}\right|</script>的行列式，不具备对角线法则，但是可以通过行列式展开公式分解成若干个3阶行列式来计算。</p><h2 id="行列式的性质"><a href="#行列式的性质" class="headerlink" title="行列式的性质"></a>行列式的性质</h2><h3 id="余子式和代数余子式"><a href="#余子式和代数余子式" class="headerlink" title="余子式和代数余子式"></a>余子式和代数余子式</h3><p>​    在n阶行列式det(<script type="math/tex">a_{ij}</script>)中，将元素<script type="math/tex">a_{ij}</script>(i,j=1,2,<script type="math/tex">\cdots</script>,n)所在的第i行和第j列划去，余下的元素按照次序不变，构成新的n-1阶行列式称为元素<script type="math/tex">a_{ij}</script>的<strong>余子式</strong>，记为<script type="math/tex">M_{ij}</script>；称<script type="math/tex">A_{ij}=(-1)^{i+j}M_{ij}</script>为元素<script type="math/tex">a_{ij}</script>的<strong>代数余子式</strong>。</p><p>​    <font color=red>n阶行列式det(<script type="math/tex">a_{ij}</script>)等于其<strong>任意一行（或列）</strong>元素与其对应的<strong>代数余子式</strong>乘积之和.</font>,这就是行列式的展开法则.</p><h3 id="性质归纳"><a href="#性质归纳" class="headerlink" title="性质归纳"></a>性质归纳</h3><p>​    <strong>1.</strong>行列式与它的转置行列式相等,”行”与”列”具有相同的地位.</p><p>​    <strong>2.</strong>如果交换n(n<script type="math/tex">\geq</script>2)阶行列式的某两行或某两列,则行列式的值变号.</p><p>​    <strong>推论2.1</strong> 如果行列式的某两行(或两列)的元素完全相同,则行列式值为0</p><p>​    <strong>3.</strong>如果行列式的某一行(或一列)具有公因子,则可以把公因子提到外面.</p><p>​    <strong>推论3.1</strong> 如果<strong>A</strong>是n阶矩阵,则<script type="math/tex">\left |\lambda A\right|=\lambda^{n}\left|A\right|</script></p><p>​    <strong>推论3.2</strong> 如果行列式的某两行(或两列)的元素对应成比例,则行列式的值为0</p><p>​    <strong>4.</strong>可以将行列式分解为两个行列式的和</p><script type="math/tex; mode=display">\left|\begin{array}{cccc}a_{11}&a_{12}&\cdots&a_{1n}\\\vdots&\vdots& &\vdots\\a_{i1}+b_{i1}&a_{i2}+b_{i2}&\cdots&a_{in}+b_{in}\\\vdots&\vdots& &\vdots\\a_{n1}&a_{n2}&\cdots&a_{nn}\end{array}\right|=\left|\begin{array}{cccc}a_{11}&a_{12}&\cdots&a_{1n}\\\vdots&\vdots& &\vdots\\a_{i1}&a_{i2}&\cdots&a_{in}\\\vdots&\vdots& &\vdots\\a_{n1}&a_{n2}&\cdots&a_{nn}\end{array}\right|+\left|\begin{array}{cccc}a_{11}&a_{12}&\cdots&a_{1n}\\\vdots&\vdots& &\vdots\\b_{i1}&b_{i2}&\cdots&b_{in}\\\vdots&\vdots& &\vdots\\a_{n1}&a_{n2}&\cdots&a_{nn}\end{array}\right|</script><p>​    </p><p>​    <strong>5.</strong>如果行列式的某一行(或某一列)的所有元素乘同一数,然后加到另一行(或列)的对应元素上,则行列式的值不变.</p><p>​    </p><p>​    <strong>6.</strong> 某一行所有元素与另外一行所有元素的代数余子式乘积之和为0.</p><h2 id="逆序数的使用"><a href="#逆序数的使用" class="headerlink" title="逆序数的使用"></a>逆序数的使用</h2><h3 id="逆序数的定义"><a href="#逆序数的定义" class="headerlink" title="逆序数的定义"></a>逆序数的定义</h3><p>​    设有一串数据排列(<script type="math/tex">a_1,a_2,a_3,\cdots,a_n</script>),对于其中一个元素而言,记录其之后所有比它小的元素的个数为x,将所有元素的x值加起来就是该排列的逆序数.</p><p>​    若逆序数为偶数,该排列为偶排列;反之则为奇排列.</p><h3 id="在行列式中的使用"><a href="#在行列式中的使用" class="headerlink" title="在行列式中的使用"></a>在行列式中的使用</h3><p>​    对于n阶行列式而言,其多项式共有<script type="math/tex">n^2</script>个不同项<script type="math/tex">a_{i1j1}a_{i2j2}a_{i3j3}a_{i4j4}</script>,取其排列(j1,j2,j3,j4)的逆序数k,则此项<script type="math/tex">a_{i1j1}a_{i2j2}a_{i3j3}a_{i4j4}</script>前面的符号为<script type="math/tex">(-1)^k</script>.</p><h2 id="拉普拉斯公式"><a href="#拉普拉斯公式" class="headerlink" title="拉普拉斯公式"></a>拉普拉斯公式</h2><h3 id="特殊的行列式"><a href="#特殊的行列式" class="headerlink" title="特殊的行列式"></a>特殊的行列式</h3><h4 id="三角行列式"><a href="#三角行列式" class="headerlink" title="三角行列式"></a>三角行列式</h4><p>正三角行列式:以正对角线为界,其中一块区域全为0的行列式,其值为正对角线元素的乘积</p><p>负三角行列式:以负对角线为界,其中一块区域全为0,其值为负对角线元素的乘积乘以<script type="math/tex">(-1)^{\frac{1}{2}n(n-1)}</script>.</p><h4 id="方阵行列式"><a href="#方阵行列式" class="headerlink" title="方阵行列式"></a>方阵行列式</h4><p><strong>1.</strong> 设A=(<script type="math/tex">a_{ij}</script>),B=(<script type="math/tex">b_{ij}</script>),C=(<script type="math/tex">c_{ij}</script>)分别是n阶,m阶和n*m阶矩阵,则有:</p><script type="math/tex; mode=display">\left|\begin{array}{cccc}A&O\\C&B\end{array}\right|=\left|A\right|\left|B\right|$$  和  $$\left|\begin{array}{cccc}A&C\\O&B\end{array}\right|=\left|A\right|\left|B\right|</script><script type="math/tex; mode=display">\left|\begin{array}{cccc}O&A\\B&C\end{array}\right|=(-1)^{mn}\left|A\right|\left|B\right|$$  和  $$\left|\begin{array}{cccc}C&A\\B&O\end{array}\right|=(-1)^{mn}\left|A\right|\left|B\right|</script><p><strong>2.</strong> 如果分块对角矩阵A=<script type="math/tex">\begin{pmatrix}A_1&O&\cdots&O\\O&A_2&\cdots&O\\\vdots&\vdots\ &&\vdots\\O&O&\cdots&A_n\end{pmatrix}</script>,其中<script type="math/tex">A_i(i=1,2,\cdots,s)</script>都是方阵,则有:</p><script type="math/tex; mode=display">\left|\begin{array}{cccc}A_1&O&\cdots&O\\O&A_2&\cdots&O\\\vdots&\vdots\ &&\vdots\\O&O&\cdots&A_n\end{array}\right|=\left|A_1\right|\left|A_2\right|\cdots\left|A_n\right|$$;**3.** 如果A,B都是n阶方阵,则$$\left|AB\right|=\left|A\right|\left|B\right|</script><h2 id="范德蒙德公式"><a href="#范德蒙德公式" class="headerlink" title="范德蒙德公式"></a>范德蒙德公式</h2><script type="math/tex; mode=display">D_n=\left|\begin{array}{cccc}1&1&\cdots&1\\x_1&x_2&\cdots&x_n\\x_1^{2}&x_2^{2}&\cdots&x_n^{2}\\\vdots&\vdots&&\vdots&\\x_1^{n-1}&x_2^{n-1}&\cdots&x_n^{n-1}\\\end{array}\right|=\prod_{1\leq j\leq i\leq n}(x_i-x_j)</script><h2 id="克拉默法则"><a href="#克拉默法则" class="headerlink" title="克拉默法则"></a>克拉默法则</h2><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>对于线性方程组<script type="math/tex">\begin{cases}a_{11}x_1+a_{12}x_2+\cdots+a_{1n}x_n=b1\\a_{21}x_1+a_{22}x_2+\cdots+a_{2n}x_n=b2\\\cdots\cdots\\a_{n1}x_1+a_{n2}x_2+\cdots+a_{nn}x_n=bn\end{cases}</script>而言,若其系数行列式<script type="math/tex">D=\left|\begin{array}{cccc}{a_{11}}&{a_{12}}&{\cdots}&{a_{1n}}\\{a_{21}}&{a_{22}}&{\cdots}&{a_{2n}}\\{\vdots}&{\vdots}&{\ddots}&{\vdots}\\{a_{n1}}&{a_{n2}}&{\cdots}&{a_{nn}}\\\end{array}\right|\not=0</script>,则该方程组有唯一解:<script type="math/tex">x_1=\frac{D_1}{D},x_2=\frac{D_2}{D},\cdots,x_n=\frac{D_n}{D}</script>.</p><p>其中<script type="math/tex">D_i</script>为将D的第i列替换为<script type="math/tex">\begin{pmatrix}b_1\\b_2\\\vdots\\b_n\end{pmatrix}</script>所形成的新行列式.</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p><strong>推论1:</strong> 若齐次方程组<script type="math/tex">\begin{cases}a_{11}x_1+a_{12}x_2+\cdots+a_{1n}x_n=0\\a_{21}x_1+a_{22}x_2+\cdots+a_{2n}x_n=0\\\cdots\cdots\\a_{n1}x_1+a_{n2}x_2+\cdots+a_{nn}x_n=0\end{cases}</script>的系数行列式不为0,则方程组有唯一的0解:</p><script type="math/tex; mode=display">x_1=0,x_2=0,\cdots,x_n=0</script><p><strong>推论2:</strong> 若上述其次方程组有非零解,则它的系数行列式一定为0.</p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学一 </tag>
            
            <tag> 线性代数 </tag>
            
            <tag> 行列式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue笔记(一)——非单文件组件</title>
      <link href="/2022/02/09/vue%E7%AC%94%E8%AE%B0(%E4%B8%80)%E2%80%94%E2%80%94%E9%9D%9E%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/02/09/vue%E7%AC%94%E8%AE%B0(%E4%B8%80)%E2%80%94%E2%80%94%E9%9D%9E%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h1><p>​    直接在html中引入vue.js，以html界面为核心</p><h2 id="1、插值语法"><a href="#1、插值语法" class="headerlink" title="1、插值语法"></a>1、插值语法</h2><p>​    在html中使用双括号即可直接使用在script中定义好的data</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//data对象式写法</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;yx&#x27;</span>,</span><br><span class="line">        <span class="attr">web</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;爷的宝藏小站&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;https://ackermanncora.site/&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h2 id="2、v-bind-（单向数据绑定）"><a href="#2、v-bind-（单向数据绑定）" class="headerlink" title="2、v-bind （单向数据绑定）"></a>2、v-bind （单向数据绑定）</h2><p>​    将html元素的某一参数与data的某一项单向绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-bind:简写为: --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;web.url&quot;</span>&gt;</span>点我去宝藏小站！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、v-model-（双向数据绑定）"><a href="#3、v-model-（双向数据绑定）" class="headerlink" title="3、v-model （双向数据绑定）"></a>3、v-model （双向数据绑定）</h2><p>​    v-model只能用在表单元素上</p><ol><li><strong>v-bind绑定value属性的值；</strong></li><li><strong>v-on绑定input事件监听到函数中，函数会获取最新的值赋值到绑定的属性中</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">双向数据绑定： <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;data2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">          <span class="attr">el</span>: <span class="string">&quot;#root2&quot;</span>,</span><br><span class="line">          <span class="comment">//data函数式写法：使用组件时必须用，不然用对象法写会报错</span></span><br><span class="line">          <span class="comment">//data()&#123;&#125;也行</span></span><br><span class="line">          <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> &#123;</span><br><span class="line">                  <span class="attr">data2</span>: <span class="string">&quot;12345&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><h2 id="4、v-on"><a href="#4、v-on" class="headerlink" title="4、v-on"></a>4、v-on</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>1)、v-on用法</p><ul><li>v-on 指令用于绑定事件监听器，v-on 指令的简写形式为 @event。</li><li>v-on 指令可以支持同时写多个事件监听器，多个事件监听器的简写形式为 v-on={@event1:handler1, @event2:handler2}。</li><li>v-on 指令支持原生 JavaScript 的所有的事件，并且支持参数传递。</li></ul><p>2）、语法</p><ul><li>缩写：<code>@</code></li><li>预期：<code>Function | Inline Statement | Object</code></li><li>参数：<code>event</code></li></ul><p>3)、v-on事件修饰符</p><ul><li>v-on .stop 阻止事件冒泡。</li><li>v-on .prevent 阻止事件的默认行为。</li><li>v-on .capture 添加事件侦听器，使用事件捕获模式。</li><li>v-on .self 只当事件在该元素本身触发时，触发回调。</li><li>v-on .once 事件只触发一次。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showinfo1&quot;</span>&gt;</span>点我生成提示1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showinfo2(66,$event)&quot;</span>&gt;</span>点我生成提示2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">          <span class="comment">//event代表鼠标点击这个事件</span></span><br><span class="line">          <span class="title function_">showinfo1</span>(<span class="params">event</span>) &#123;</span><br><span class="line">              <span class="title function_">alert</span>(<span class="string">&quot;我是提示信息1！&quot;</span>)</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="title function_">showinfo2</span>(<span class="params">num, event</span>) &#123;</span><br><span class="line">              <span class="title function_">alert</span>(<span class="string">&quot;我是提示信息2！！&quot;</span>)</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(num, event)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="2、v-on的6个事件修饰符"><a href="#2、v-on的6个事件修饰符" class="headerlink" title="2、v-on的6个事件修饰符"></a>2、v-on的6个事件修饰符</h3><ol><li><strong>prevent</strong>：阻止默认事件</li><li><strong>stop</strong>：阻止事件冒泡</li><li><strong>once</strong>：事件只发生以此（终结v-for循环）</li><li><strong>capture</strong>：使用事件的捕获模式</li><li><strong>self</strong>：只有event.target是当前操作的元素时才触发事件</li><li><strong>passive</strong>：事件的默认行为立即执行，无需等待事件回调执行完毕</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;web.url&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showinfo1&quot;</span>&gt;</span>阻止默认事件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;showinfo1&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;web.url&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showinfo1&quot;</span>&gt;</span>阻止事件冒泡<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showinfo1&quot;</span>&gt;</span>事件只发生一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.capture</span>=<span class="string">&quot;showMSG(1)&quot;</span>&gt;</span></span><br><span class="line">          事件捕获模式1</span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;showMSG(2)&quot;</span>&gt;</span>事件捕获模式2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">          <span class="comment">//event代表鼠标点击这个事件</span></span><br><span class="line">          <span class="title function_">showinfo1</span>(<span class="params">event</span>) &#123;</span><br><span class="line">              <span class="title function_">alert</span>(<span class="string">&quot;我是提示信息1！&quot;</span>)</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="title function_">showinfo2</span>(<span class="params">num, event</span>) &#123;</span><br><span class="line">              <span class="title function_">alert</span>(<span class="string">&quot;我是提示信息2！！&quot;</span>)</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(num, event)</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="title function_">showMSG</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">              <span class="title function_">alert</span>(<span class="string">&quot;事件发生第&quot;</span> + msg + <span class="string">&#x27;次！！！&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="5、键盘事件"><a href="#5、键盘事件" class="headerlink" title="5、键盘事件"></a>5、键盘事件</h2><h3 id="1、常用按键别名"><a href="#1、常用按键别名" class="headerlink" title="1、常用按键别名"></a>1、常用按键别名</h3><ol><li>回车：enter</li></ol><ol><li>删除或退格：delete</li></ol><ol><li>退出：esc</li></ol><ol><li>空格：space</li></ol><ol><li>换行：tab（必须配合keydown使用，ctrl、alt、shift、meta也是）</li></ol><ol><li>上下左右：up、down、left、right</li></ol><h3 id="2、使用例"><a href="#2、使用例" class="headerlink" title="2、使用例"></a>2、使用例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>键盘事件keyup<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span>       @<span class="attr">keyup.enter</span>=<span class="string">&quot;showinfoKey&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">          <span class="title function_">showinfoKey</span>(<span class="params">e</span>) &#123;</span><br><span class="line">              <span class="comment">// if (e.keyCode != 13) return</span></span><br><span class="line">              <span class="title function_">alert</span>(<span class="string">&quot;我是提示信息&quot;</span> + e.<span class="property">target</span>.<span class="property">value</span> + <span class="string">&quot;！&quot;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="6、Computed-（计算属性）"><a href="#6、Computed-（计算属性）" class="headerlink" title="6、Computed （计算属性）"></a>6、Computed （计算属性）</h2><p>​    computed计算属性用于将data中的数据加工成沃玛需要的新数据，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">          <span class="attr">fullName1</span>: &#123;</span><br><span class="line">              <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot;-&quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="comment">//set方法没必要覆写，除非你希望添加些其他东西</span></span><br><span class="line">              <span class="comment">// set(value) &#123;</span></span><br><span class="line">              <span class="comment">//     const arr = value.split(&quot;-&quot;)</span></span><br><span class="line">              <span class="comment">//     this.firstName = arr[0]</span></span><br><span class="line">              <span class="comment">//     this.lastName = arr[1]</span></span><br><span class="line">              <span class="comment">// &#125;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">//或者这样简写：</span></span><br><span class="line">          <span class="title function_">fullName2</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot;-&quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>计算属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">      全名:</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName1&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName2&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7、Watch-（监视属性）"><a href="#7、Watch-（监视属性）" class="headerlink" title="7、Watch （监视属性）"></a>7、Watch （监视属性）</h2><p>​    当指定的data发生变化时，所执行的方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root4&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span>监视属性:今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm4 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">          <span class="attr">el</span>: <span class="string">&quot;#root4&quot;</span>,</span><br><span class="line">          <span class="attr">data</span>: &#123;</span><br><span class="line">              <span class="attr">isHot</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">numbers</span>: &#123;</span><br><span class="line">                  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">                  <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">methods</span>: &#123;</span><br><span class="line">              <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span><br><span class="line">                  <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">computed</span>: &#123;</span><br><span class="line">              <span class="title function_">info</span>(<span class="params"></span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">watch</span>: &#123;</span><br><span class="line">              <span class="attr">isHot</span>: &#123;</span><br><span class="line">                  <span class="attr">immediate</span>: <span class="literal">false</span>, <span class="comment">//可省略，true为初始化时发生改变</span></span><br><span class="line">                  <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">                      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;isHot被修改了&quot;</span>, newValue, oldValue)</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">numbers</span>: &#123;</span><br><span class="line">                  <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">//深度监视，可以监测到多层级数据的变化</span></span><br><span class="line">                  <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">                      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;numbers被修改了&quot;</span>)</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p>​    也可以先创建vm，后续再把watch属性加入到vm中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二种写法:</span></span><br><span class="line">vm4.$watch(<span class="string">&#x27;info&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">false</span>, <span class="comment">//可省略，true为初始化时发生改变</span></span><br><span class="line">    <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;info被修改了&quot;</span>, newValue, oldValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="8、列表渲染-v-for"><a href="#8、列表渲染-v-for" class="headerlink" title="8、列表渲染 v-for"></a>8、列表渲染 v-for</h2><p>​    v-for可以设定类似for循环的子标签自动标准化生成功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>列表渲染v-for<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;p.id&#125;&#125;-&#123;&#123;p.name&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in perArr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;index&#125;&#125;-&#123;&#123;p.id&#125;&#125;-&#123;&#123;p.name&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加一个老刘<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm5 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">       <span class="attr">el</span>: <span class="string">&quot;#root5&quot;</span>,</span><br><span class="line">       <span class="attr">data</span>: &#123;</span><br><span class="line">           <span class="attr">persons</span>: [&#123;</span><br><span class="line">                   <span class="attr">id</span>: <span class="number">10001</span>,</span><br><span class="line">                   <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="attr">id</span>: <span class="number">10002</span>,</span><br><span class="line">                   <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span></span><br><span class="line">               &#125;</span><br><span class="line">           ]</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">methods</span>: &#123;</span><br><span class="line">           <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="keyword">const</span> p = &#123; <span class="attr">id</span>: <span class="number">10003</span>, <span class="attr">name</span>: <span class="string">&#x27;老刘&#x27;</span> &#125;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">unshift</span>(p)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h2 id="9、过滤器fliter"><a href="#9、过滤器fliter" class="headerlink" title="9、过滤器fliter"></a>9、过滤器fliter</h2><p>​    过滤器实质不改变原始数据，只是对数据进行加工处理后返回过滤后的数据再进行调用处理，我们也可以理解其为一个纯函数。</p><p>​    <code>Vue</code> 允许你自定义过滤器，可被用于一些常见的文本格式化。</p><p>​    ps: <code>Vue3</code>中已废弃<code>filter</code>。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在双花括号中 --&gt;</span></span><br><span class="line">&#123;&#123;message | captialize&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 在`v-bind`中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义代码"><a href="#定义代码" class="headerlink" title="定义代码"></a>定义代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">computed</span>: &#123;<span class="comment">//计算属性方法</span></span><br><span class="line">            <span class="title function_">formattedTimestamp</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">timestamp</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;<span class="comment">//methods方法</span></span><br><span class="line">            <span class="title function_">formatTimestamp</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">timestamp</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">filters</span>: &#123; <span class="comment">//过滤器方法</span></span><br><span class="line">            <span class="title function_">formatTimestampFilter</span>(<span class="params">timestamp</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">dayjs</span>(timestamp).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Formatted Timestamp<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; formattedTimestamp &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Formatted Timestamp (using method)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; formatTimestamp() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Formatted Timestamp (using filter)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; timestamp | formatTimestampFilter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10、mounted-挂起"><a href="#10、mounted-挂起" class="headerlink" title="10、mounted() 挂起"></a>10、mounted() 挂起</h2><p>​    <em>官方文档说明：</em></p><p>​    实例被挂载后调用，这时 <code>el</code> 被新创建的 <code>vm.$el</code> 替换了。如果根实例挂载到了一个文档内的元素上，当 <code>mounted</code> 被调用时 <code>vm.$el</code> 也在文档内。</p><p>​    注意 <code>mounted</code> <strong>不会</strong>保证所有的子组件也都被挂载完成。如果你希望等到整个视图都渲染完毕再执行某些操作，可以在 <code>mounted</code> 内部使用 <a href="https://v2.cn.vuejs.org/v2/api/#vm-nextTick">vm.$nextTick</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mounted</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 仅在整个视图都被渲染之后才会运行的代码</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <strong>该钩子在服务器端渲染期间不被调用。</strong></p><h3 id="使用例："><a href="#使用例：" class="headerlink" title="使用例："></a>使用例：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span>欢迎学习Vue.js<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num</span>: <span class="number">0.1</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">opacity</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//Vue完成模板的解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">opacity</span> -= <span class="variable language_">this</span>.<span class="property">num</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">opacity</span> &lt;= <span class="number">0</span> || <span class="variable language_">this</span>.<span class="property">opacity</span> &gt;= <span class="number">1</span>) <span class="variable language_">this</span>.<span class="property">num</span> = -<span class="number">1</span> * <span class="variable language_">this</span>.<span class="property">num</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">160</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
