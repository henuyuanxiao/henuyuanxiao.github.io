<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线性代数·矩阵总结</title>
      <link href="/2022/03/14/%E7%9F%A9%E9%98%B5%E6%80%BB%E7%BB%93/"/>
      <url>/2022/03/14/%E7%9F%A9%E9%98%B5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>​    行列式部分知识点总结</p><h1 id="线性代数·矩阵"><a href="#线性代数·矩阵" class="headerlink" title="线性代数·矩阵"></a>线性代数·矩阵</h1><h2 id="常用的特殊矩阵"><a href="#常用的特殊矩阵" class="headerlink" title="常用的特殊矩阵"></a>常用的特殊矩阵</h2><h3 id="三角矩阵"><a href="#三角矩阵" class="headerlink" title="三角矩阵"></a>三角矩阵</h3><p>主对角线以下或以上的元素全为0的方阵</p><h3 id="n阶对角矩阵"><a href="#n阶对角矩阵" class="headerlink" title="n阶对角矩阵"></a>n阶对角矩阵</h3><p>主对角线以外的元素全为0的n阶方阵</p><h4 id="n阶单位矩阵"><a href="#n阶单位矩阵" class="headerlink" title="n阶单位矩阵"></a>n阶单位矩阵</h4><p>主对角线上元素全为1的n阶对角矩阵，用大写字母<strong>E</strong>表示</p><h3 id="零矩阵"><a href="#零矩阵" class="headerlink" title="零矩阵"></a>零矩阵</h3><p>元素全为0的矩阵，用大写字母<strong>O</strong>表示</p><h3 id="行阶梯矩阵"><a href="#行阶梯矩阵" class="headerlink" title="行阶梯矩阵"></a>行阶梯矩阵</h3><p>矩阵的零行都位于非零行的下方，每一个非零行的主元素所在的列以下的元素皆为0，并且每个主元素所在的列位于前一行主元素所在列的右侧。形如：</p><script type="math/tex; mode=display">\begin{pmatrix}1&6&7&9\\0&0&2&6\\0&0&0&0\end{pmatrix} \begin{pmatrix}0&2&3&4\\0&0&5&6\\0&0&0&0\end{pmatrix} \begin{pmatrix}1&2&3&4\\0&0&5&0\\0&0&0&9\end{pmatrix}</script><h4 id="行最简形矩阵"><a href="#行最简形矩阵" class="headerlink" title="行最简形矩阵"></a>行最简形矩阵</h4><p>每个非零行的主元素都是1，并且1所在的列的其余元素均为0，如：</p><script type="math/tex; mode=display">\begin{pmatrix}1&0&0&4\\0&0&1&6\\0&0&0&0\end{pmatrix} \begin{pmatrix}0&1&0&4\\0&0&1&6\\0&0&0&0\end{pmatrix} \begin{pmatrix}1&0&0&4\\0&1&0&6\\0&0&1&2\end{pmatrix}</script><hr><h2 id="矩阵运算法则"><a href="#矩阵运算法则" class="headerlink" title="矩阵运算法则"></a>矩阵运算法则</h2><h3 id="加法和减法"><a href="#加法和减法" class="headerlink" title="加法和减法"></a>加法和减法</h3><p>两个矩阵对应位置上的元素相加减，因此只有同类型的矩阵才能相加减</p><p>具有如下定律：</p><p>（1）<strong>A</strong>+<strong>B</strong>=<strong>B</strong>+<strong>A</strong></p><p>（2）(<strong>A</strong>+<strong>B</strong>)+<strong>C</strong>=<strong>A</strong>+(<strong>B</strong>+<strong>C</strong>)</p><p>（3）<strong>A</strong>+<strong>O</strong>=<strong>A</strong>，其中<strong>O</strong>是m×n阶零矩阵</p><p>（4）<strong>A</strong>+(-<strong>A</strong>)=<strong>O</strong></p><p>因此矩阵减法有：<strong>A</strong>-<strong>B</strong>=<strong>A</strong>+(-<strong>B</strong>)</p><h3 id="数乘"><a href="#数乘" class="headerlink" title="数乘"></a>数乘</h3><p>设$\lambda$、$\mu$为任意实数，有：</p><p>（1）1<strong>A</strong>=<strong>A</strong></p><p>（2）($\lambda$+$\mu$)<strong>A</strong>=$\lambda$<strong>A</strong>+$\mu$<strong>A</strong></p><p>（3）$\lambda$(<strong>A</strong>+<strong>B</strong>)=$\lambda$<strong>A</strong>+$\lambda$<strong>B</strong></p><p>（4）($\lambda\mu$)<strong>A</strong>=$\lambda$($\mu$<strong>A</strong>)=$\mu$($\lambda$<strong>A</strong>)</p><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><p>矩阵<strong>A</strong>与<strong>B</strong>的乘积结果为新的矩阵，其(i,j)元等于<strong>A</strong>的第i行和<strong>B</strong>的第j列的元素对应乘积之和，</p><p>左边矩阵的列数=右边矩阵的行数，结果矩阵拥有左边的行数与右边的列数</p><p>具有以下特点：</p><p>（1）<script type="math/tex">(AB)C=A(BC)</script></p><p>（2）<script type="math/tex">A(B+C)=AB+AC</script>,<script type="math/tex">(B+C)A=BA+CA</script></p><p>（3）<script type="math/tex">\lambda(AB)</script>=$(\lambda A)B$=<script type="math/tex">A(\lambda B)</script></p><p>（4）只有当<script type="math/tex">AB=BA</script>时，<script type="math/tex">(AB)^k=A^kB^k</script></p><h3 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h3><p>将矩阵<script type="math/tex">A</script>的行列互换，记作<script type="math/tex">A^T</script>，具有如下定律：</p><p>（1）(<script type="math/tex">A^T</script>)<script type="math/tex">^T</script>=<script type="math/tex">A</script></p><p>（2）<script type="math/tex">(A+B)^T=A^T+B^T</script></p><p>（3）<script type="math/tex">(\lambda A)^T=\lambda A^T</script></p><p>（4）<script type="math/tex">(AB)^T=B^TA^T</script></p><p>如果<script type="math/tex">A^T</script>=<script type="math/tex">A</script>，则称<script type="math/tex">A</script>为对称矩阵；如果<strong><script type="math/tex">A</script></strong>=<script type="math/tex">-A^T</script>，则称<script type="math/tex">A</script>为反对称矩阵</p><hr><h2 id="可逆矩阵"><a href="#可逆矩阵" class="headerlink" title="可逆矩阵"></a>可逆矩阵</h2><h3 id="伴随矩阵"><a href="#伴随矩阵" class="headerlink" title="伴随矩阵"></a>伴随矩阵</h3><p>设<script type="math/tex">A=(a_{ij})</script>是n(n<script type="math/tex">\geq</script>2)阶方阵，<script type="math/tex">A_{ij}</script>为行列式<script type="math/tex">|A|</script>中元素<script type="math/tex">a_{ij}</script>的代数余子式，称n阶矩阵</p><script type="math/tex; mode=display">\begin{pmatrix}A_{11}&{A_{21}}&{\cdots}&{A_{n1}}\\{A_{12}}&{A_{22}}&{\cdots}&{A_{n2}}\\{\vdots}&{\vdots}&{\ddots}&{\vdots}\\{A_{1n}}&{A_{2n}}&{\cdots}&{A_{nn}}\\\end{pmatrix}$$为方阵**A**的伴随矩阵，记为$$A^*$$ 。且有$$AA^*$$=$$A^*A$$ =$$|A|E$$ 。### 可逆矩阵的判定条件$$A^{-1}=\frac{1}{|A|}A^*$$，如果$$|A|\not=0$$，则$$A$$可逆。### 可逆矩阵的性质（1）$$(A^{-1})^{-1}=A</script><p>（2）<script type="math/tex">(A^T)^{-1}=(A^{-1})^T</script></p><p>（3）<script type="math/tex">(\lambda A^{-1})=\frac{1}{\lambda}A^{-1}</script>，其中<script type="math/tex">\lambda \not=0</script></p><p>（4）<script type="math/tex">(AB)^{-1}=B^{-1}A^{-1}</script></p><p>（5）如果<script type="math/tex">A</script>可逆，则<script type="math/tex">|A|\not=0</script>，且<script type="math/tex">|A^{-1}|=|A|^{-1}</script></p><p>（6）如果<script type="math/tex">A</script>可逆，且<script type="math/tex">AB=AC</script>，则<script type="math/tex">B=C</script></p><hr><h2 id="克拉默法则"><a href="#克拉默法则" class="headerlink" title="克拉默法则"></a>克拉默法则</h2><p>对于线性方程组<script type="math/tex">\begin{cases}a_{11}x_1+a_{12}x_2+\cdots+a_{1n}x_n=b1\\a_{21}x_1+a_{22}x_2+\cdots+a_{2n}x_n=b2\\\cdots\cdots\\a_{n1}x_1+a_{n2}x_2+\cdots+a_{nn}x_n=bn\end{cases}</script>而言,若其系数行列式<script type="math/tex">D=\left|\begin{array}{cccc}{a_{11}}&{a_{12}}&{\cdots}&{a_{1n}}\\{a_{21}}&{a_{22}}&{\cdots}&{a_{2n}}\\{\vdots}&{\vdots}&{\ddots}&{\vdots}\\{a_{n1}}&{a_{n2}}&{\cdots}&{a_{nn}}\\\end{array}\right|\not=0</script>,则该方程组有唯一解:<script type="math/tex">x_1=\frac{D_1}{D},x_2=\frac{D_2}{D},\cdots,x_n=\frac{D_n}{D}</script>.</p><p>其中<script type="math/tex">D_i</script>为将D的第i列替换为<script type="math/tex">\begin{pmatrix}b_1\\b_2\\\vdots\\b_n\end{pmatrix}</script>所形成的新行列式.</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p><strong>推论1:</strong> 若齐次方程组<script type="math/tex">\begin{cases}a_{11}x_1+a_{12}x_2+\cdots+a_{1n}x_n=0\\a_{21}x_1+a_{22}x_2+\cdots+a_{2n}x_n=0\\\cdots\cdots\\a_{n1}x_1+a_{n2}x_2+\cdots+a_{nn}x_n=0\end{cases}</script>的系数行列式不为0,则方程组有唯一的0解:</p><script type="math/tex; mode=display">x_1=0,x_2=0,\cdots,x_n=0</script><p><strong>推论2:</strong> 若上述其次方程组有非零解,则它的系数行列式一定为0.</p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学一 </tag>
            
            <tag> 线性代数 </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数·行列式总结</title>
      <link href="/2022/03/01/%E8%A1%8C%E5%88%97%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
      <url>/2022/03/01/%E8%A1%8C%E5%88%97%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>​    行列式部分知识点总结</p><h1 id="线性代数·行列式"><a href="#线性代数·行列式" class="headerlink" title="线性代数·行列式"></a>线性代数·行列式</h1><h2 id="行列式的定义"><a href="#行列式的定义" class="headerlink" title="行列式的定义"></a>行列式的定义</h2><h3 id="2阶行列式"><a href="#2阶行列式" class="headerlink" title="2阶行列式"></a>2阶行列式</h3><p>​    对于线性方程组<script type="math/tex">\begin{cases}a_{11}x_1+a_{12}x_2=b1\\a_{21}x_1+a_{22}x_2=b2\end{cases}</script>而言，称<script type="math/tex">a_{11}a_{12}-a_{21}a_{22}</script>为二阶方阵<script type="math/tex">\begin{pmatrix}a_{11}&a_{12}\\a_{21}&a_{22}\end{pmatrix}</script>的<strong>行列式</strong>，记作<script type="math/tex">\left|\begin{array}{cccc}a_{11}&a_{12}\\a_{21}&a_{22}\end{array}\right|=a_{11}a_{12}-a_{21}a_{22}</script> ，即主对角线上的乘积减去右对角线上的乘积，即对角线法则。</p><h3 id="3阶行列式"><a href="#3阶行列式" class="headerlink" title="3阶行列式"></a>3阶行列式</h3><p>​    类似2阶行列式，对于线性方程组<script type="math/tex">\begin{cases}a_{11}x_1+a_{12}x_2+a_{13}x_3=b1\\a_{21}x_1+a_{22}x_2+a_{23}x_3=b2\\a_{31}x_1+a_{32}x_2+a_{33}x_3=b3\end{cases}</script>而言，称<script type="math/tex">a_{11}a_{22}a_{33}+a_{12}a_{23}a_{31}+a_{13}a_{21}a_{32}-a_{13}a_{22}a_{31}-a_{11}a_{23}a_{32}-a_{12}a_{21}a_{33}</script>为3阶方阵<script type="math/tex">\begin{pmatrix}a_{11}&a_{12}&a_{13}\\a_{21}&a_{22}&a_{23}\\a_{31}&a_{32}&a_{33}\end{pmatrix}</script>的行列式，记作<script type="math/tex">\left|\begin{array}{cccc}a_{11}&a_{12}&a_{13}\\a_{21}&a_{22}&a_{23}\\a_{31}&a_{32}&a_{33}\end{array}\right|</script></p><p>​    3阶行列式同样具有对角线法则。</p><h3 id="n阶行列式"><a href="#n阶行列式" class="headerlink" title="n阶行列式"></a>n阶行列式</h3><p>​    形如<script type="math/tex">\left|\begin{array}{cccc}{a_{11}}&{a_{12}}&{\cdots}&{a_{1n}}\\{a_{21}}&{a_{22}}&{\cdots}&{a_{2n}}\\{\vdots}&{\vdots}&{\ddots}&{\vdots}\\{a_{m1}}&{a_{m2}}&{\cdots}&{a_{mn}}\\\end{array}\right|</script>的行列式，不具备对角线法则，但是可以通过行列式展开公式分解成若干个3阶行列式来计算。</p><h2 id="行列式的性质"><a href="#行列式的性质" class="headerlink" title="行列式的性质"></a>行列式的性质</h2><h3 id="余子式和代数余子式"><a href="#余子式和代数余子式" class="headerlink" title="余子式和代数余子式"></a>余子式和代数余子式</h3><p>​    在n阶行列式det(<script type="math/tex">a_{ij}</script>)中，将元素<script type="math/tex">a_{ij}</script>(i,j=1,2,<script type="math/tex">\cdots</script>,n)所在的第i行和第j列划去，余下的元素按照次序不变，构成新的n-1阶行列式称为元素<script type="math/tex">a_{ij}</script>的<strong>余子式</strong>，记为<script type="math/tex">M_{ij}</script>；称<script type="math/tex">A_{ij}=(-1)^{i+j}M_{ij}</script>为元素<script type="math/tex">a_{ij}</script>的<strong>代数余子式</strong>。</p><p>​    <font color=red>n阶行列式det(<script type="math/tex">a_{ij}</script>)等于其<strong>任意一行（或列）</strong>元素与其对应的<strong>代数余子式</strong>乘积之和.</font>,这就是行列式的展开法则.</p><h3 id="性质归纳"><a href="#性质归纳" class="headerlink" title="性质归纳"></a>性质归纳</h3><p>​    <strong>1.</strong>行列式与它的转置行列式相等,”行”与”列”具有相同的地位.</p><p>​    <strong>2.</strong>如果交换n(n<script type="math/tex">\geq</script>2)阶行列式的某两行或某两列,则行列式的值变号.</p><p>​    <strong>推论2.1</strong> 如果行列式的某两行(或两列)的元素完全相同,则行列式值为0</p><p>​    <strong>3.</strong>如果行列式的某一行(或一列)具有公因子,则可以把公因子提到外面.</p><p>​    <strong>推论3.1</strong> 如果<strong>A</strong>是n阶矩阵,则<script type="math/tex">\left |\lambda A\right|=\lambda^{n}\left|A\right|</script></p><p>​    <strong>推论3.2</strong> 如果行列式的某两行(或两列)的元素对应成比例,则行列式的值为0</p><p>​    <strong>4.</strong>可以将行列式分解为两个行列式的和</p><script type="math/tex; mode=display">\left|\begin{array}{cccc}a_{11}&a_{12}&\cdots&a_{1n}\\\vdots&\vdots& &\vdots\\a_{i1}+b_{i1}&a_{i2}+b_{i2}&\cdots&a_{in}+b_{in}\\\vdots&\vdots& &\vdots\\a_{n1}&a_{n2}&\cdots&a_{nn}\end{array}\right|=\left|\begin{array}{cccc}a_{11}&a_{12}&\cdots&a_{1n}\\\vdots&\vdots& &\vdots\\a_{i1}&a_{i2}&\cdots&a_{in}\\\vdots&\vdots& &\vdots\\a_{n1}&a_{n2}&\cdots&a_{nn}\end{array}\right|+\left|\begin{array}{cccc}a_{11}&a_{12}&\cdots&a_{1n}\\\vdots&\vdots& &\vdots\\b_{i1}&b_{i2}&\cdots&b_{in}\\\vdots&\vdots& &\vdots\\a_{n1}&a_{n2}&\cdots&a_{nn}\end{array}\right|</script><p>​    </p><p>​    <strong>5.</strong>如果行列式的某一行(或某一列)的所有元素乘同一数,然后加到另一行(或列)的对应元素上,则行列式的值不变.</p><p>​    </p><p>​    <strong>6.</strong> 某一行所有元素与另外一行所有元素的代数余子式乘积之和为0.</p><h2 id="逆序数的使用"><a href="#逆序数的使用" class="headerlink" title="逆序数的使用"></a>逆序数的使用</h2><h3 id="逆序数的定义"><a href="#逆序数的定义" class="headerlink" title="逆序数的定义"></a>逆序数的定义</h3><p>​    设有一串数据排列(<script type="math/tex">a_1,a_2,a_3,\cdots,a_n</script>),对于其中一个元素而言,记录其之后所有比它小的元素的个数为x,将所有元素的x值加起来就是该排列的逆序数.</p><p>​    若逆序数为偶数,该排列为偶排列;反之则为奇排列.</p><h3 id="在行列式中的使用"><a href="#在行列式中的使用" class="headerlink" title="在行列式中的使用"></a>在行列式中的使用</h3><p>​    对于n阶行列式而言,其多项式共有<script type="math/tex">n^2</script>个不同项<script type="math/tex">a_{i1j1}a_{i2j2}a_{i3j3}a_{i4j4}</script>,取其排列(j1,j2,j3,j4)的逆序数k,则此项<script type="math/tex">a_{i1j1}a_{i2j2}a_{i3j3}a_{i4j4}</script>前面的符号为<script type="math/tex">(-1)^k</script>.</p><h2 id="拉普拉斯公式"><a href="#拉普拉斯公式" class="headerlink" title="拉普拉斯公式"></a>拉普拉斯公式</h2><h3 id="特殊的行列式"><a href="#特殊的行列式" class="headerlink" title="特殊的行列式"></a>特殊的行列式</h3><h4 id="三角行列式"><a href="#三角行列式" class="headerlink" title="三角行列式"></a>三角行列式</h4><p>正三角行列式:以正对角线为界,其中一块区域全为0的行列式,其值为正对角线元素的乘积</p><p>负三角行列式:以负对角线为界,其中一块区域全为0,其值为负对角线元素的乘积乘以<script type="math/tex">(-1)^{\frac{1}{2}n(n-1)}</script>.</p><h4 id="方阵行列式"><a href="#方阵行列式" class="headerlink" title="方阵行列式"></a>方阵行列式</h4><p><strong>1.</strong> 设A=(<script type="math/tex">a_{ij}</script>),B=(<script type="math/tex">b_{ij}</script>),C=(<script type="math/tex">c_{ij}</script>)分别是n阶,m阶和n*m阶矩阵,则有:</p><script type="math/tex; mode=display">\left|\begin{array}{cccc}A&O\\C&B\end{array}\right|=\left|A\right|\left|B\right|$$  和  $$\left|\begin{array}{cccc}A&C\\O&B\end{array}\right|=\left|A\right|\left|B\right|</script><script type="math/tex; mode=display">\left|\begin{array}{cccc}O&A\\B&C\end{array}\right|=(-1)^{mn}\left|A\right|\left|B\right|$$  和  $$\left|\begin{array}{cccc}C&A\\B&O\end{array}\right|=(-1)^{mn}\left|A\right|\left|B\right|</script><p><strong>2.</strong> 如果分块对角矩阵A=<script type="math/tex">\begin{pmatrix}A_1&O&\cdots&O\\O&A_2&\cdots&O\\\vdots&\vdots\ &&\vdots\\O&O&\cdots&A_n\end{pmatrix}</script>,其中<script type="math/tex">A_i(i=1,2,\cdots,s)</script>都是方阵,则有:</p><script type="math/tex; mode=display">\left|\begin{array}{cccc}A_1&O&\cdots&O\\O&A_2&\cdots&O\\\vdots&\vdots\ &&\vdots\\O&O&\cdots&A_n\end{array}\right|=\left|A_1\right|\left|A_2\right|\cdots\left|A_n\right|$$;**3.** 如果A,B都是n阶方阵,则$$\left|AB\right|=\left|A\right|\left|B\right|</script><h2 id="范德蒙德公式"><a href="#范德蒙德公式" class="headerlink" title="范德蒙德公式"></a>范德蒙德公式</h2><script type="math/tex; mode=display">D_n=\left|\begin{array}{cccc}1&1&\cdots&1\\x_1&x_2&\cdots&x_n\\x_1^{2}&x_2^{2}&\cdots&x_n^{2}\\\vdots&\vdots&&\vdots&\\x_1^{n-1}&x_2^{n-1}&\cdots&x_n^{n-1}\\\end{array}\right|=\prod_{1\leq j\leq i\leq n}(x_i-x_j)</script><h2 id="克拉默法则"><a href="#克拉默法则" class="headerlink" title="克拉默法则"></a>克拉默法则</h2><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>对于线性方程组<script type="math/tex">\begin{cases}a_{11}x_1+a_{12}x_2+\cdots+a_{1n}x_n=b1\\a_{21}x_1+a_{22}x_2+\cdots+a_{2n}x_n=b2\\\cdots\cdots\\a_{n1}x_1+a_{n2}x_2+\cdots+a_{nn}x_n=bn\end{cases}</script>而言,若其系数行列式<script type="math/tex">D=\left|\begin{array}{cccc}{a_{11}}&{a_{12}}&{\cdots}&{a_{1n}}\\{a_{21}}&{a_{22}}&{\cdots}&{a_{2n}}\\{\vdots}&{\vdots}&{\ddots}&{\vdots}\\{a_{n1}}&{a_{n2}}&{\cdots}&{a_{nn}}\\\end{array}\right|\not=0</script>,则该方程组有唯一解:<script type="math/tex">x_1=\frac{D_1}{D},x_2=\frac{D_2}{D},\cdots,x_n=\frac{D_n}{D}</script>.</p><p>其中<script type="math/tex">D_i</script>为将D的第i列替换为<script type="math/tex">\begin{pmatrix}b_1\\b_2\\\vdots\\b_n\end{pmatrix}</script>所形成的新行列式.</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p><strong>推论1:</strong> 若齐次方程组<script type="math/tex">\begin{cases}a_{11}x_1+a_{12}x_2+\cdots+a_{1n}x_n=0\\a_{21}x_1+a_{22}x_2+\cdots+a_{2n}x_n=0\\\cdots\cdots\\a_{n1}x_1+a_{n2}x_2+\cdots+a_{nn}x_n=0\end{cases}</script>的系数行列式不为0,则方程组有唯一的0解:</p><script type="math/tex; mode=display">x_1=0,x_2=0,\cdots,x_n=0</script><p><strong>推论2:</strong> 若上述其次方程组有非零解,则它的系数行列式一定为0.</p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学一 </tag>
            
            <tag> 线性代数 </tag>
            
            <tag> 行列式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在图片中隐藏信息——基于Java的LSP算法</title>
      <link href="/2022/02/09/%E5%9C%A8%E5%9B%BE%E7%89%87%E4%B8%AD%E9%9A%90%E8%97%8F%E4%BF%A1%E6%81%AF%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EJava%E7%9A%84LSP%E7%AE%97%E6%B3%95/"/>
      <url>/2022/02/09/%E5%9C%A8%E5%9B%BE%E7%89%87%E4%B8%AD%E9%9A%90%E8%97%8F%E4%BF%A1%E6%81%AF%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EJava%E7%9A%84LSP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>​    趁放假把下学期的创新项目实践预判完成一点，下学期多腾出时间备考。</p><h1 id="LSB算法"><a href="#LSB算法" class="headerlink" title="LSB算法"></a>LSB算法</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    LSB算法：全称Least Significant Bit（最低有效位），指将秘密信息嵌入到载体图像像素值的<a href="https://baike.baidu.com/item/%E6%9C%80%E4%BD%8E%E6%9C%89%E6%95%88%E4%BD%8D/4487937">最低有效位</a>，也称最不显著位，改变这一位置对载体图像的品质影响最小。</p><p>​    LSB属于空域算法中的一种，是将信息嵌入到图像点中像素位的最低位，以保证嵌入的信息是不可见的，但是由于使用了图像不重要的像素位，算法的鲁棒性差，水印信息很容易为滤波、图像量化、几何变形的操作破坏。</p><p>​    本篇主要讲简单实现在图片中注入隐含信息。</p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>​    以.png图片为例，每一个像素点显示的颜色由r、g、b三个元素分量的数值决定（取值范围为0~255），将其化为二进制的形式，如Color(255,102,102),不足8位的首部补0，可得到如下排列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1111111 1</span><br><span class="line">1110011 0</span><br><span class="line">1110011 0</span><br></pre></td></tr></table></figure><p>​    末尾排列为100，将其置0，我们可以将二进制编码写在其中，对应需要隐藏的信息。由于最低有效位的原理，在复杂的图片中人眼基本感受不到颜色的变化，这样就实现了加密；解密只需将其取出组合，并翻译成对应的文本即可。</p><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>1 将原始载体图像的空域像素值由十进制转换成二进制；</p><p>2 用二进制秘密信息中的每一比特信息替换与之相对应的载体数据的<a href="https://baike.baidu.com/item/%E6%9C%80%E4%BD%8E%E6%9C%89%E6%95%88%E4%BD%8D/4487937">最低有效位</a>；</p><p>3 将得到的含秘密信息的二进制数据转换为十进制像素值，从而获得含秘密信息的图像。</p><h2 id="简单的java代码实现"><a href="#简单的java代码实现" class="headerlink" title="简单的java代码实现"></a>简单的java代码实现</h2><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">encryption</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title function_">encryptionLSB</span><span class="params">(BufferedImage secretImg, String data)</span>&#123;</span><br><span class="line">        List&lt;StringBuffer&gt; rgbList= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;StringBuffer&gt;();</span><br><span class="line">        StringToBin stringToBin=<span class="keyword">new</span> <span class="title class_">StringToBin</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//密文内容转二进制，并分割0和1元素</span></span><br><span class="line">        String dataBin= stringToBin.StrToBinstr(data);</span><br><span class="line">        <span class="type">char</span>[] databinArray=dataBin.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> secretImg.getWidth(), height = secretImg.getHeight();</span><br><span class="line"></span><br><span class="line">        String r8bit=<span class="literal">null</span>;</span><br><span class="line">        String g8bit=<span class="literal">null</span>;</span><br><span class="line">        String b8bit=<span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> a,r = <span class="number">0</span>,g=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> <span class="number">0</span>; w &lt; width; w++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>; h &lt; height; h++) &#123;</span><br><span class="line">                <span class="type">int</span> val=secretImg.getRGB(w,h);</span><br><span class="line">                a = (<span class="number">0xff000000</span> &amp; val) &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line">                r = (<span class="number">0x00ff0000</span> &amp; val) &gt;&gt; <span class="number">16</span>;</span><br><span class="line">                g = (<span class="number">0x0000ff00</span> &amp; val) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">                b = (<span class="number">0x000000ff</span> &amp; val);</span><br><span class="line">                <span class="type">double</span> <span class="variable">power</span> <span class="operator">=</span> Math.pow(<span class="number">2.0</span>, <span class="number">4.0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//转换为二进制</span></span><br><span class="line">                r8bit = Integer.toBinaryString((<span class="type">int</span>)(r));</span><br><span class="line">                g8bit = Integer.toBinaryString((<span class="type">int</span>)(g));</span><br><span class="line">                b8bit = Integer.toBinaryString((<span class="type">int</span>)(b));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//不足8位的在首部补齐0</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">rDifference</span> <span class="operator">=</span> <span class="number">8</span> - r8bit.length();</span><br><span class="line">                <span class="type">int</span> <span class="variable">gDifference</span> <span class="operator">=</span> <span class="number">8</span> - g8bit.length();</span><br><span class="line">                <span class="type">int</span> <span class="variable">bDifference</span> <span class="operator">=</span> <span class="number">8</span> - b8bit.length();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> rDifference; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">                    r8bit=<span class="string">&quot;0&quot;</span>+r8bit;&#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gDifference; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">                    g8bit = <span class="string">&quot;0&quot;</span>+g8bit;&#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bDifference; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">                    b8bit = <span class="string">&quot;0&quot;</span>+b8bit;&#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将末尾置0,便于进行编码隐藏</span></span><br><span class="line">                <span class="comment">//StringBuffer便于修改字符串内容</span></span><br><span class="line">                StringBuffer rbuff=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(r8bit);</span><br><span class="line">                StringBuffer gbuff=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(g8bit);</span><br><span class="line">                StringBuffer bbuff=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(b8bit);</span><br><span class="line">                rbuff.setCharAt(<span class="number">7</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                gbuff.setCharAt(<span class="number">7</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                bbuff.setCharAt(<span class="number">7</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">                rgbList.add(rbuff);</span><br><span class="line">                rgbList.add(gbuff);</span><br><span class="line">                rgbList.add(bbuff);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//生成加密后的rgb数组，并将其元素从二进制转换为十进制</span></span><br><span class="line">        <span class="type">int</span>[] rgbArray=<span class="keyword">new</span> <span class="title class_">int</span>[rgbList.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;rgbList.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;databinArray.length-<span class="number">1</span>) &#123;</span><br><span class="line">                rgbList.get(i).setCharAt(<span class="number">7</span>, databinArray[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rgbArray[i] = Integer.parseInt(rgbList.get(i).toString(), <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成加密图片</span></span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> <span class="number">0</span>; w &lt; width; w++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>; h &lt; height; h++) &#123;</span><br><span class="line">                secretImg.setRGB(w, h,<span class="keyword">new</span> <span class="title class_">Color</span>(rgbArray[i],rgbArray[i+<span class="number">1</span>],rgbArray[i+<span class="number">2</span>]).getRGB());</span><br><span class="line">                i=i+<span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> secretImg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//设置原始图片路径</span></span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">secretImg</span> <span class="operator">=</span> ImageIO.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/img/kitokawa.png&quot;</span>));</span><br><span class="line">        <span class="comment">//设置密文内容</span></span><br><span class="line">        String data=<span class="string">&quot;这是一道密文！&quot;</span>;</span><br><span class="line">        secretImg=encryptionLSB(secretImg,data);</span><br><span class="line">        ImageIO.write(secretImg, <span class="string">&quot;png&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;secret.png&quot;</span>));<span class="comment">//在项目路径输出得到的图片</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">decrypt</span> &#123;<span class="comment">//解密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decryptLSB</span><span class="params">(BufferedImage secretImg,<span class="type">int</span> limit)</span> &#123;<span class="comment">//防止图片尺寸过大，循环过长时间，添加限制次数默认为10000，可适度增大</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> secretImg.getWidth(), height = secretImg.getHeight();</span><br><span class="line">        <span class="type">String</span> <span class="variable">dataBin</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">r8bit</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">g8bit</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b8bit</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> a,x=<span class="number">0</span>, r = <span class="number">0</span>, g = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> <span class="number">0</span>; w &lt; width; w++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>; h &lt; height; h++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> secretImg.getRGB(w, h);</span><br><span class="line">                a = (<span class="number">0xff000000</span> &amp; val) &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line">                r = (<span class="number">0x00ff0000</span> &amp; val) &gt;&gt; <span class="number">16</span>;</span><br><span class="line">                g = (<span class="number">0x0000ff00</span> &amp; val) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">                b = (<span class="number">0x000000ff</span> &amp; val);</span><br><span class="line">                <span class="type">double</span> <span class="variable">power</span> <span class="operator">=</span> Math.pow(<span class="number">2.0</span>, <span class="number">4.0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//转换二进制</span></span><br><span class="line">                r8bit = Integer.toBinaryString((<span class="type">int</span>) (r));</span><br><span class="line">                g8bit = Integer.toBinaryString((<span class="type">int</span>) (g));</span><br><span class="line">                b8bit = Integer.toBinaryString((<span class="type">int</span>) (b));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//不足8位的在首部补齐0</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">rDifference</span> <span class="operator">=</span> <span class="number">8</span> - r8bit.length();</span><br><span class="line">                <span class="type">int</span> <span class="variable">gDifference</span> <span class="operator">=</span> <span class="number">8</span> - g8bit.length();</span><br><span class="line">                <span class="type">int</span> <span class="variable">bDifference</span> <span class="operator">=</span> <span class="number">8</span> - b8bit.length();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> rDifference; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    r8bit = <span class="string">&quot;0&quot;</span> + r8bit;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gDifference; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    g8bit = <span class="string">&quot;0&quot;</span> + g8bit;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bDifference; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    b8bit = <span class="string">&quot;0&quot;</span> + b8bit;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将末尾置0,便于进行编码隐藏</span></span><br><span class="line">                <span class="type">StringBuffer</span> <span class="variable">rbuff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(r8bit);</span><br><span class="line">                <span class="type">StringBuffer</span> <span class="variable">gbuff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(g8bit);</span><br><span class="line">                <span class="type">StringBuffer</span> <span class="variable">bbuff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(b8bit);</span><br><span class="line">                dataBin+=rbuff.charAt(<span class="number">7</span>);</span><br><span class="line">                dataBin+=gbuff.charAt(<span class="number">7</span>);</span><br><span class="line">                dataBin+=bbuff.charAt(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(x&gt;limit)<span class="keyword">break</span>;</span><br><span class="line">                x++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;limit)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//每个字母、汉字、符号的分隔符为&#x27;%#&#x27;</span></span><br><span class="line">        String X=Integer.toBinaryString(<span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">        String Y=Integer.toBinaryString(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">        String[] datas=dataBin.split(X+Y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;datas.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            data+= BinToString.toString(datas[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> limit=<span class="number">10000</span>;</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">secretImg</span> <span class="operator">=</span> ImageIO.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;secret.png&quot;</span>));</span><br><span class="line">        System.out.println(decryptLSB(secretImg,limit));</span><br><span class="line">        File f=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);<span class="comment">//解密内容输出txt</span></span><br><span class="line">        FileOutputStream fos1=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f);</span><br><span class="line">        OutputStreamWriter dos1=<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos1);</span><br><span class="line">        dos1.write(decryptLSB(secretImg,limit));</span><br><span class="line">        dos1.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用到的其他方法类"><a href="#使用到的其他方法类" class="headerlink" title="使用到的其他方法类"></a>使用到的其他方法类</h3><h4 id="加工整合二进制编码字符串"><a href="#加工整合二进制编码字符串" class="headerlink" title="加工整合二进制编码字符串"></a>加工整合二进制编码字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToBin</span> &#123;</span><br><span class="line">    <span class="comment">//加工整合二进制编码字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">StrToBinstr</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="comment">//分隔符为&#x27;%#&#x27;</span></span><br><span class="line">        String x=Integer.toBinaryString(<span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">        String y=Integer.toBinaryString(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">        <span class="type">char</span>[] strChar = str.toCharArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strChar.length; i++) &#123;</span><br><span class="line">            result += Integer.toBinaryString(strChar[i]) + x+y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二进制编码翻译成String"><a href="#二进制编码翻译成String" class="headerlink" title="二进制编码翻译成String"></a>二进制编码翻译成String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinToString</span> &#123;<span class="comment">//加密</span></span><br><span class="line">    <span class="comment">//将二进制翻译成String文本</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(String binary)</span> &#123;</span><br><span class="line">        <span class="comment">//分隔符为&#x27;%#&#x27;</span></span><br><span class="line">        String x=Integer.toBinaryString(<span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">        String y=Integer.toBinaryString(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">        String[] tempStr=binary.split(x+y);</span><br><span class="line">        <span class="type">char</span>[] tempChar=<span class="keyword">new</span> <span class="title class_">char</span>[tempStr.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tempStr.length;i++) &#123;</span><br><span class="line">            tempChar[i]=BinstrToChar(tempStr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(tempChar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将二进制字符串转换成int数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] BinstrToIntArray(String binStr) &#123;</span><br><span class="line">        <span class="type">char</span>[] temp=binStr.toCharArray();</span><br><span class="line">        <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[temp.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;temp.length;i++) &#123;</span><br><span class="line">            result[i]=temp[i]-<span class="number">48</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将二进制转换成字符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">BinstrToChar</span><span class="params">(String binStr)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] temp=BinstrToIntArray(binStr);</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;temp.length;i++)&#123;</span><br><span class="line">            sum +=temp[temp.length-<span class="number">1</span>-i]&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">char</span>)sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>加密生成secret.png：</p><p><img src="https://cdn.jsdelivr.net/gh/henuyuanxiao/cdn/img/LSP/加密生成图片.png" alt="avatar"></p><p>解密生成文本：</p><p><img src="https://cdn.jsdelivr.net/gh/henuyuanxiao/cdn/img/LSP/解密.png" alt="avatar"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>参考链接：</p><p><a href="https://blog.csdn.net/qq_38768365/article/details/102494128">原理详解</a>        <a href="https://baike.baidu.com/item/LSB%E7%AE%97%E6%B3%95/6553811?fr=aladdin">百度百科</a>        <a href="https://zhuanlan.zhihu.com/p/32230487">基于图像的 LSB 隐写术科普</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息加密 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/04/hello-world/"/>
      <url>/2022/02/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试用博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
